<?xml version="1.0"?>
<doc>
    <assembly>
        <name>CoreSharp</name>
    </assembly>
    <members>
        <member name="T:CoreSharp.Abstracts.DisposableBase">
            <summary>
            Automatic and safe disposing.
            Just override the two clean-up methods.
            </summary>
        </member>
        <member name="M:CoreSharp.Abstracts.DisposableBase.Finalize">
            <summary>
            Deconstructor.
            </summary>
        </member>
        <member name="M:CoreSharp.Abstracts.DisposableBase.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing,
            releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:CoreSharp.Abstracts.DisposableBase.DisposeNativeResources(System.Boolean)">
            <summary>
            Helper method to call from two locations.
            The actually disposal is performed here.
            The actual disposal is performed here.
            </summary>
        </member>
        <member name="M:CoreSharp.Abstracts.DisposableBase.CleanUpManagedResources">
            <summary>
            Clean up managed resources.
            Handles, <see cref="T:System.IO.Stream"/> and other <see cref="T:System.IDisposable"/>.
            </summary>
        </member>
        <member name="M:CoreSharp.Abstracts.DisposableBase.CleanUpNativeResources">
            <summary>
            Clean up native resources, lists and set large fields to null.
            Usually fields and properties set in constructor.
            </summary>
        </member>
        <member name="T:CoreSharp.Abstracts.NotifyPropertyChangedBase">
            <inheritdoc cref="T:System.ComponentModel.INotifyPropertyChanged" />
        </member>
        <member name="T:CoreSharp.Concrete.Communication.NamedPipes.NamedPipeClient">
            <summary>
            Client for NamedPipe communication.
            </summary>
        </member>
        <member name="T:CoreSharp.Concrete.Communication.NamedPipes.NamedPipeServer">
            <summary>
            Server for NamedPipe communication.
            </summary>
        </member>
        <member name="P:CoreSharp.Concrete.Communication.Tcp.TcpServer.NoDelay">
            <summary>
            Specify whether the Socket is using the Nagle algorithm.
            </summary>
        </member>
        <member name="P:CoreSharp.Concrete.Communication.Tcp.TcpServer.DualMode">
            <summary>
            Allow both IPv4 and IPv6.
            </summary>
        </member>
        <member name="P:CoreSharp.Concrete.Communication.Tcp.TcpServer.Backlog">
            <summary>
            The maximum length of the pending connections queue.
            </summary>
        </member>
        <member name="T:CoreSharp.Enums.CurrencyNegativePattern">
            <summary>
            <see cref="T:System.Enum"/> used with <see cref="P:System.Globalization.NumberFormatInfo.CurrencyNegativePattern"/>.
            Can be cast to <see cref="T:System.Int32"/>.
            </summary>
        </member>
        <member name="F:CoreSharp.Enums.CurrencyNegativePattern.ParenthesisCurrencyNumber">
            <summary>
            ($n)
            </summary>
        </member>
        <member name="F:CoreSharp.Enums.CurrencyNegativePattern.SignCurrencyNumber">
            <summary>
            -$n
            </summary>
        </member>
        <member name="F:CoreSharp.Enums.CurrencyNegativePattern.CurrencySignNumber">
            <summary>
            $-n
            </summary>
        </member>
        <member name="F:CoreSharp.Enums.CurrencyNegativePattern.CurrencyNumberSign">
            <summary>
            $n-
            </summary>
        </member>
        <member name="F:CoreSharp.Enums.CurrencyNegativePattern.ParenthesisNumberCurrency">
            <summary>
            (n$)
            </summary>
        </member>
        <member name="F:CoreSharp.Enums.CurrencyNegativePattern.SignNumberCurrency">
            <summary>
            -n$
            </summary>
        </member>
        <member name="F:CoreSharp.Enums.CurrencyNegativePattern.NumberSignCurrency">
            <summary>
            n-$
            </summary>
        </member>
        <member name="F:CoreSharp.Enums.CurrencyNegativePattern.NumberCurrencySign">
            <summary>
            n$-
            </summary>
        </member>
        <member name="F:CoreSharp.Enums.CurrencyNegativePattern.SignNumberSpaceCurrency">
            <summary>
            -n $
            </summary>
        </member>
        <member name="F:CoreSharp.Enums.CurrencyNegativePattern.SignCurrencySpaceNumber">
            <summary>
            -$ n
            </summary>
        </member>
        <member name="F:CoreSharp.Enums.CurrencyNegativePattern.NumberSpaceCurrencySign">
            <summary>
            n $-
            </summary>
        </member>
        <member name="F:CoreSharp.Enums.CurrencyNegativePattern.CurrencySpaceNumberSign">
            <summary>
            $ n-
            </summary>
        </member>
        <member name="F:CoreSharp.Enums.CurrencyNegativePattern.CurrencySpaceSignNumber">
            <summary>
            $ -n
            </summary>
        </member>
        <member name="F:CoreSharp.Enums.CurrencyNegativePattern.NumberSignSpaceCurrency">
            <summary>
            n- $
            </summary>
        </member>
        <member name="F:CoreSharp.Enums.CurrencyNegativePattern.ParenthesisCurrencySpaceNumber">
            <summary>
            ($ n)
            </summary>
        </member>
        <member name="F:CoreSharp.Enums.CurrencyNegativePattern.ParenthesisNumberSpaceCurrency">
            <summary>
            (n $)
            </summary>
        </member>
        <member name="T:CoreSharp.Enums.CurrencyPositivePattern">
            <summary>
            <see cref="T:System.Enum"/> used with <see cref="P:System.Globalization.NumberFormatInfo.CurrencyPositivePattern"/>.
            Can be cast to <see cref="T:System.Int32"/>.
            </summary>
        </member>
        <member name="F:CoreSharp.Enums.CurrencyPositivePattern.CurrencyNumber">
            <summary>
            $n
            </summary>
        </member>
        <member name="F:CoreSharp.Enums.CurrencyPositivePattern.NumberCurrency">
            <summary>
            n$
            </summary>
        </member>
        <member name="F:CoreSharp.Enums.CurrencyPositivePattern.CurrencySpaceNumber">
            <summary>
            $ n
            </summary>
        </member>
        <member name="F:CoreSharp.Enums.CurrencyPositivePattern.NumberSpaceCurrency">
            <summary>
             n $
            </summary>
        </member>
        <member name="T:CoreSharp.Enums.Month">
            <summary>
            Month <see cref="T:System.Enum"/>.
            Can be cast to <see cref="T:System.Int32"/>.
            </summary>
        </member>
        <member name="F:CoreSharp.Enums.Month.January">
            <summary>
            January.
            </summary>
        </member>
        <member name="F:CoreSharp.Enums.Month.February">
            <summary>
            February.
            </summary>
        </member>
        <member name="F:CoreSharp.Enums.Month.March">
            <summary>
            March.
            </summary>
        </member>
        <member name="F:CoreSharp.Enums.Month.April">
            <summary>
            April.
            </summary>
        </member>
        <member name="F:CoreSharp.Enums.Month.May">
            <summary>
            May.
            </summary>
        </member>
        <member name="F:CoreSharp.Enums.Month.June">
            <summary>
            June.
            </summary>
        </member>
        <member name="F:CoreSharp.Enums.Month.July">
            <summary>
            July.
            </summary>
        </member>
        <member name="F:CoreSharp.Enums.Month.August">
            <summary>
            August.
            </summary>
        </member>
        <member name="F:CoreSharp.Enums.Month.September">
            <summary>
            September.
            </summary>
        </member>
        <member name="F:CoreSharp.Enums.Month.October">
            <summary>
            October.
            </summary>
        </member>
        <member name="F:CoreSharp.Enums.Month.November">
            <summary>
            November.
            </summary>
        </member>
        <member name="F:CoreSharp.Enums.Month.December">
            <summary>
            December.
            </summary>
        </member>
        <member name="T:CoreSharp.Enums.NumberNegativePattern">
            <summary>
            <see cref="T:System.Enum"/> used with <see cref="P:System.Globalization.NumberFormatInfo.NumberNegativePattern"/>.
            Can be cast to <see cref="T:System.Int32"/>.
            </summary>
        </member>
        <member name="F:CoreSharp.Enums.NumberNegativePattern.ParenthesisNumber">
            <summary>
            (n)
            </summary>
        </member>
        <member name="F:CoreSharp.Enums.NumberNegativePattern.SignNumber">
            <summary>
            -n
            </summary>
        </member>
        <member name="F:CoreSharp.Enums.NumberNegativePattern.SignSpaceNumber">
            <summary>
            - n
            </summary>
        </member>
        <member name="F:CoreSharp.Enums.NumberNegativePattern.NumberSign">
            <summary>
            n-
            </summary>
        </member>
        <member name="F:CoreSharp.Enums.NumberNegativePattern.NumberSpaceSign">
            <summary>
            n -
            </summary>
        </member>
        <member name="T:CoreSharp.Extensions.ArrayExtensions">
            <summary>
            <see cref="T:System.Array"/> extensions.
            </summary>
        </member>
        <member name="M:CoreSharp.Extensions.ArrayExtensions.GetRow``1(``0[0:,0:],System.Int32)">
            <summary>
            Get row from 2D array.
            </summary>
        </member>
        <member name="M:CoreSharp.Extensions.ArrayExtensions.GetColumn``1(``0[0:,0:],System.Int32)">
            <summary>
            Get column from 2D array.
            </summary>
        </member>
        <member name="T:CoreSharp.Extensions.AssemblyNameExtensions">
            <summary>
            <see cref="T:System.Reflection.AssemblyName"/> extensions.
            </summary>
        </member>
        <member name="M:CoreSharp.Extensions.AssemblyNameExtensions.GetAssembly(System.Reflection.AssemblyName)">
            <inheritdoc cref="M:System.Reflection.Assembly.Load(System.Reflection.AssemblyName)"/>
        </member>
        <member name="T:CoreSharp.Extensions.ByteExtensions">
            <summary>
            <see cref="T:System.Byte"/> extensions.
            </summary>
        </member>
        <member name="M:CoreSharp.Extensions.ByteExtensions.Map(System.Byte,System.Byte,System.Byte,System.Byte,System.Byte)">
            <inheritdoc cref="M:CoreSharp.Extensions.DecimalExtensions.Map(System.Decimal,System.Decimal,System.Decimal,System.Decimal,System.Decimal)"/>
        </member>
        <member name="T:CoreSharp.Extensions.DataRowExtensions">
            <summary>
            <see cref="T:System.Data.DataRow"/> extensions.
            </summary>
        </member>
        <member name="M:CoreSharp.Extensions.DataRowExtensions.GetColumnNames(System.Data.DataRow)">
            <summary>
            Get DataRow column names.
            </summary>
        </member>
        <member name="M:CoreSharp.Extensions.DataRowExtensions.GetColumnValues(System.Data.DataRow)">
            <summary>
            Get DataRow column values.
            </summary>
        </member>
        <member name="M:CoreSharp.Extensions.DataRowExtensions.ToEntity``1(System.Data.DataRow,System.Boolean)">
            <summary>
            Map DataRow values to TEntity.
            </summary>
        </member>
        <member name="T:CoreSharp.Extensions.DataTableExtensions">
            <summary>
            <see cref="T:System.Data.DataTable"/> extensions.
            </summary>
        </member>
        <member name="M:CoreSharp.Extensions.DataTableExtensions.GetColumnNames(System.Data.DataTable)">
            <summary>
            Get DataTable column names.
            </summary>
        </member>
        <member name="M:CoreSharp.Extensions.DataTableExtensions.ToEntities``1(System.Data.DataTable,System.Boolean)">
            <summary>
            Map DataTable values to TEntity collection.
            </summary>
        </member>
        <member name="T:CoreSharp.Extensions.DateTimeExtensions">
            <summary>
            <see cref="T:System.DateTime"/> extensions.
            </summary>
        </member>
        <member name="M:CoreSharp.Extensions.DateTimeExtensions.GetElapsedTime(System.DateTime)">
            <summary>
            Get the elapsed time since the input value.
            </summary>
        </member>
        <member name="M:CoreSharp.Extensions.DateTimeExtensions.HasExpired(System.DateTime,System.TimeSpan)">
            <summary>
            Check if specific TimeSpan has passed since a DateTime.
            </summary>
        </member>
        <member name="M:CoreSharp.Extensions.DateTimeExtensions.IsWeekend(System.DateTime)">
            <summary>
            Check if date is in a weekend.
            </summary>
        </member>
        <member name="M:CoreSharp.Extensions.DateTimeExtensions.IsInLeapYear(System.DateTime)">
            <summary>
            Check if date is in a leap year.
            </summary>
        </member>
        <member name="M:CoreSharp.Extensions.DateTimeExtensions.Trim(System.DateTime,CoreSharp.Enums.DateTimeParts)">
            <summary>
            Trim part of DateTime.
            </summary>
            <example>
            var date = DateTime.Now.Trim(DateTimePrecision.Milliseconds | DateTimePrecision.Seconds);
            </example>
        </member>
        <member name="M:CoreSharp.Extensions.DateTimeExtensions.ToStringSortable(System.DateTime)">
            <summary>
            Convert DateTime to sortable format using "u" specifier.
            </summary>
        </member>
        <member name="M:CoreSharp.Extensions.DateTimeExtensions.ToStringSortableUtc(System.DateTime)">
            <summary>
            Convert DateTime to UTC sortable format using "ο" specifier.
            </summary>
        </member>
        <member name="M:CoreSharp.Extensions.DateTimeExtensions.ToShortDateString(System.DateTime,System.Globalization.CultureInfo)">
            <inheritdoc cref="M:System.DateTime.ToShortDateString"/>
        </member>
        <member name="M:CoreSharp.Extensions.DateTimeExtensions.ToLongDateString(System.DateTime,System.Globalization.CultureInfo)">
            <inheritdoc cref="M:System.DateTime.ToLongDateString"/>
        </member>
        <member name="M:CoreSharp.Extensions.DateTimeExtensions.ToShortTimeString(System.DateTime,System.Globalization.CultureInfo)">
            <inheritdoc cref="M:System.DateTime.ToShortTimeString"/>
        </member>
        <member name="M:CoreSharp.Extensions.DateTimeExtensions.ToLongTimeString(System.DateTime,System.Globalization.CultureInfo)">
            <inheritdoc cref="M:System.DateTime.ToLongTimeString"/>
        </member>
        <member name="T:CoreSharp.Extensions.DbCommandExtensions">
            <summary>
            <see cref="T:System.Data.Common.DbCommand"/> extensions.
            </summary>
        </member>
        <member name="M:CoreSharp.Extensions.DbCommandExtensions.CreateParameter(System.Data.Common.DbCommand,System.String,System.Object)">
            <inheritdoc cref="M:System.Data.Common.DbCommand.CreateParameter"/>
        </member>
        <member name="M:CoreSharp.Extensions.DbCommandExtensions.AddParameterWithValue(System.Data.Common.DbCommand,System.String,System.Object)">
            <inheritdoc cref="M:System.Data.Common.DbParameterCollection.Add(System.Object)"/>
        </member>
        <member name="T:CoreSharp.Extensions.DbConnectionExtensions">
            <summary>
            <see cref="T:System.Data.Common.DbConnection"/> extensions.
            </summary>
        </member>
        <member name="M:CoreSharp.Extensions.DbConnectionExtensions.CreateDataAdapter(System.Data.Common.DbConnection)">
            <inheritdoc cref="M:System.Data.Common.DbProviderFactory.CreateDataAdapter"/>
        </member>
        <member name="M:CoreSharp.Extensions.DbConnectionExtensions.CreateParameter(System.Data.Common.DbConnection,System.String,System.Object)">
            <inheritdoc cref="M:CoreSharp.Extensions.DbProviderFactoryExtensions.CreateParameter(System.Data.Common.DbProviderFactory,System.String,System.Object)" />
        </member>
        <member name="M:CoreSharp.Extensions.DbConnectionExtensions.OpenTransaction(System.Data.Common.DbConnection)">
            <inheritdoc cref="M:CoreSharp.Extensions.DbConnectionExtensions.OpenTransactionAsync(System.Data.Common.DbConnection,System.Data.IsolationLevel)" />
        </member>
        <member name="M:CoreSharp.Extensions.DbConnectionExtensions.OpenTransaction(System.Data.Common.DbConnection,System.Data.IsolationLevel)">
            <inheritdoc cref="M:CoreSharp.Extensions.DbConnectionExtensions.OpenTransactionAsync(System.Data.Common.DbConnection,System.Data.IsolationLevel)" />
        </member>
        <member name="M:CoreSharp.Extensions.DbConnectionExtensions.OpenTransactionAsync(System.Data.Common.DbConnection)">
            <inheritdoc cref="M:CoreSharp.Extensions.DbConnectionExtensions.OpenTransactionAsync(System.Data.Common.DbConnection,System.Data.IsolationLevel)" />
        </member>
        <member name="M:CoreSharp.Extensions.DbConnectionExtensions.OpenTransactionAsync(System.Data.Common.DbConnection,System.Data.IsolationLevel)">
            <summary>
            Try to open connection and begin a new transaction on it.
            </summary>
        </member>
        <member name="M:CoreSharp.Extensions.DbConnectionExtensions.IsOpen(System.Data.Common.DbConnection)">
            <summary>
            Check <see cref="P:System.Data.Common.DbConnection.State"/> for <see cref="F:System.Data.ConnectionState.Open"/>.
            </summary>
        </member>
        <member name="M:CoreSharp.Extensions.DbConnectionExtensions.IsAvailable(System.Data.Common.DbConnection)">
            <inheritdoc cref="M:CoreSharp.Extensions.DbConnectionExtensions.IsAvailableAsync(System.Data.Common.DbConnection,System.Threading.CancellationToken)" />
        </member>
        <member name="M:CoreSharp.Extensions.DbConnectionExtensions.IsAvailableAsync(System.Data.Common.DbConnection,System.Threading.CancellationToken)">
            <summary>
            Chain calls <see cref="M:System.Data.Common.DbConnection.OpenAsync(System.Threading.CancellationToken)"/> and <see cref="M:System.Data.Common.DbConnection.CloseAsync"/>.
            </summary>
        </member>
        <member name="T:CoreSharp.Extensions.DbProviderFactoryExtensions">
            <summary>
            <see cref="T:System.Data.Common.DbProviderFactory"/> extensions.
            </summary>
        </member>
        <member name="M:CoreSharp.Extensions.DbProviderFactoryExtensions.CreateParameter(System.Data.Common.DbProviderFactory,System.String,System.Object)">
            <inheritdoc cref="M:System.Data.Common.DbProviderFactory.CreateParameter"/>
        </member>
        <member name="T:CoreSharp.Extensions.DecimalExtensions">
            <summary>
            <see cref="T:System.Decimal"/> extensions.
            </summary>
        </member>
        <member name="M:CoreSharp.Extensions.DecimalExtensions.Map(System.Decimal,System.Decimal,System.Decimal,System.Decimal,System.Decimal)">
            <summary>
            Re-maps a number from one range to another.
            </summary>
        </member>
        <member name="T:CoreSharp.Extensions.DirectoryInfoExtensions">
            <summary>
            <see cref="T:System.IO.DirectoryInfo"/> extensions.
            </summary>
        </member>
        <member name="M:CoreSharp.Extensions.DirectoryInfoExtensions.Clear(System.IO.DirectoryInfo,System.Boolean)">
            <summary>
            Deletes all files from directory.
            </summary>
        </member>
        <member name="T:CoreSharp.Extensions.DoubleExtensions">
            <summary>
            <see cref="T:System.Double"/> extensions.
            </summary>
        </member>
        <member name="M:CoreSharp.Extensions.DoubleExtensions.Map(System.Double,System.Double,System.Double,System.Double,System.Double)">
            <inheritdoc cref="M:CoreSharp.Extensions.DecimalExtensions.Map(System.Decimal,System.Decimal,System.Decimal,System.Decimal,System.Decimal)"/>
        </member>
        <member name="M:CoreSharp.Extensions.DoubleExtensions.ToMetricSize(System.Double)">
            <inheritdoc cref="M:CoreSharp.Extensions.DoubleExtensions.ToMetricSize(System.Double,System.String,System.IFormatProvider)"/>
        </member>
        <member name="M:CoreSharp.Extensions.DoubleExtensions.ToMetricSize(System.Double,System.String)">
            <inheritdoc cref="M:CoreSharp.Extensions.DoubleExtensions.ToMetricSize(System.Double,System.String,System.IFormatProvider)"/>
        </member>
        <member name="M:CoreSharp.Extensions.DoubleExtensions.ToMetricSize(System.Double,System.IFormatProvider)">
            <inheritdoc cref="M:CoreSharp.Extensions.DoubleExtensions.ToMetricSize(System.Double,System.String,System.IFormatProvider)"/>
        </member>
        <member name="M:CoreSharp.Extensions.DoubleExtensions.ToMetricSizeCI(System.Double)">
            <inheritdoc cref="M:CoreSharp.Extensions.DoubleExtensions.ToMetricSize(System.Double,System.String,System.IFormatProvider)"/>
        </member>
        <member name="M:CoreSharp.Extensions.DoubleExtensions.ToMetricSize(System.Double,System.String,System.IFormatProvider)">
            <summary>
            Convert value to SI string with appropriate prefix.
            </summary>
        </member>
        <member name="T:CoreSharp.Extensions.EnumExtensions">
            <summary>
            <see cref="T:System.Enum"/> extensions.
            </summary>
        </member>
        <member name="M:CoreSharp.Extensions.EnumExtensions.GetAttribute``1(System.Enum)">
            <summary>
            Get given <see cref="T:System.Attribute"/> from an <see cref="T:System.Enum"/>.
            </summary>
        </member>
        <member name="M:CoreSharp.Extensions.EnumExtensions.GetDisplay(System.Enum)">
            <summary>
            Get <see cref="T:System.ComponentModel.DataAnnotations.DisplayAttribute"/> attribute from an <see cref="T:System.Enum"/>.
            </summary>
        </member>
        <member name="M:CoreSharp.Extensions.EnumExtensions.GetDisplayName(System.Enum)">
            <summary>
            Get <see cref="P:System.ComponentModel.DataAnnotations.DisplayAttribute.Name"/> attribute from an <see cref="T:System.Enum"/>.
            </summary>
        </member>
        <member name="M:CoreSharp.Extensions.EnumExtensions.GetDisplayShortName(System.Enum)">
            <summary>
            Get <see cref="P:System.ComponentModel.DataAnnotations.DisplayAttribute.ShortName"/> attribute from an <see cref="T:System.Enum"/>.
            </summary>
        </member>
        <member name="M:CoreSharp.Extensions.EnumExtensions.GetDisplayDescription(System.Enum)">
            <summary>
            Get <see cref="P:System.ComponentModel.DataAnnotations.DisplayAttribute.Description"/> attribute from an <see cref="T:System.Enum"/>.
            </summary>
        </member>
        <member name="T:CoreSharp.Extensions.ExceptionExtensions">
            <summary>
            <see cref="T:System.Exception"/> extensions.
            </summary>
        </member>
        <member name="M:CoreSharp.Extensions.ExceptionExtensions.FlattenMessages(System.Exception)">
            <summary>
            Get all messages, including nested exceptions.
            </summary>
        </member>
        <member name="M:CoreSharp.Extensions.ExceptionExtensions.Flatten(System.Exception)">
            <summary>
            Return unfolded list of exceptions including nested ones.
            </summary>
        </member>
        <member name="T:CoreSharp.Extensions.ExpandoObjectExtensions">
            <summary>
            <see cref="T:System.Dynamic.ExpandoObject"/> extensions.
            </summary>
        </member>
        <member name="M:CoreSharp.Extensions.ExpandoObjectExtensions.ToDictionary(System.Dynamic.ExpandoObject)">
            <summary>
            Convert to dictionary.
            </summary>
        </member>
        <member name="M:CoreSharp.Extensions.ExpandoObjectExtensions.GetValue``1(System.Dynamic.ExpandoObject,System.String)">
            <summary>
            Try get specific value by key.
            </summary>
        </member>
        <member name="T:CoreSharp.Extensions.FileInfoExtensions">
            <summary>
            <see cref="T:System.IO.FileInfo"/> extensions.
            </summary>
        </member>
        <member name="M:CoreSharp.Extensions.FileInfoExtensions.ChangeExtension(System.IO.FileInfo,System.String)">
            <summary>
            Change given file extension.
            </summary>
        </member>
        <member name="M:CoreSharp.Extensions.FileInfoExtensions.Rename(System.IO.FileInfo,System.String,System.Boolean)">
            <summary>
            Rename given file.
            </summary>
            <param name="name">New file name. May include or not a new extension.</param>
        </member>
        <member name="T:CoreSharp.Extensions.FloatExtensions">
            <summary>
            <see cref="T:System.Single"/> extensions.
            </summary>
        </member>
        <member name="M:CoreSharp.Extensions.FloatExtensions.Map(System.Single,System.Single,System.Single,System.Single,System.Single)">
            <inheritdoc cref="M:CoreSharp.Extensions.DecimalExtensions.Map(System.Decimal,System.Decimal,System.Decimal,System.Decimal,System.Decimal)"/>
        </member>
        <member name="T:CoreSharp.Extensions.GenericExtensions">
            <summary>
            Generic extensions.
            </summary>
        </member>
        <member name="M:CoreSharp.Extensions.GenericExtensions.IsIn``1(``0,System.Collections.Generic.IEnumerable{``0})">
            <inheritdoc cref="M:CoreSharp.Extensions.GenericExtensions.IsIn``1(``0,``0[])"/>
        </member>
        <member name="M:CoreSharp.Extensions.GenericExtensions.IsIn``2(``0,System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
            <inheritdoc cref="M:CoreSharp.Extensions.GenericExtensions.IsIn``1(``0,``0[])"/>
        </member>
        <member name="M:CoreSharp.Extensions.GenericExtensions.IsIn``1(``0,``0[])">
            <inheritdoc cref="M:System.Linq.Enumerable.Contains``1(System.Collections.Generic.IEnumerable{``0},``0)"/>>
        </member>
        <member name="M:CoreSharp.Extensions.GenericExtensions.ToJson``1(``0)">
            <inheritdoc cref="M:CoreSharp.Extensions.GenericExtensions.ToJson``1(``0,Newtonsoft.Json.JsonSerializerSettings)"/>
        </member>
        <member name="M:CoreSharp.Extensions.GenericExtensions.ToJson``1(``0,Newtonsoft.Json.JsonSerializerSettings)">
            <summary>
            Serialize object to json.
            </summary>
        </member>
        <member name="M:CoreSharp.Extensions.GenericExtensions.JsonClone``1(``0)">
            <inheritdoc cref="M:CoreSharp.Extensions.GenericExtensions.JsonClone``1(``0,Newtonsoft.Json.JsonSerializerSettings)"/>
        </member>
        <member name="M:CoreSharp.Extensions.GenericExtensions.JsonClone``1(``0,Newtonsoft.Json.JsonSerializerSettings)">
            <summary>
            Perform a deep copy using Json serialization.
            </summary>
        </member>
        <member name="M:CoreSharp.Extensions.GenericExtensions.JsonEquals``1(``0,``0)">
            <inheritdoc cref="M:CoreSharp.Extensions.GenericExtensions.JsonEquals``1(``0,``0,Newtonsoft.Json.JsonSerializerSettings)"/>
        </member>
        <member name="M:CoreSharp.Extensions.GenericExtensions.JsonEquals``1(``0,``0,Newtonsoft.Json.JsonSerializerSettings)">
            <summary>
            Compares two objects by converting them to json (string).
            </summary>
        </member>
        <member name="M:CoreSharp.Extensions.GenericExtensions.ReflectionClone``1(``0)">
            <summary>
            Perform a deep copy using reflection and public properties.
            </summary>
        </member>
        <member name="M:CoreSharp.Extensions.GenericExtensions.ReflectionEquals``1(``0,``0)">
            <summary>
            Compares two objects using reflection and public properties.
            </summary>
        </member>
        <member name="M:CoreSharp.Extensions.GenericExtensions.IsNull``1(``0)">
            <inheritdoc cref="M:CoreSharp.Extensions.GenericExtensions.IsNull``1(System.Nullable{``0})"/>
        </member>
        <member name="M:CoreSharp.Extensions.GenericExtensions.IsNull``1(System.Nullable{``0})">
            <inheritdoc cref="P:System.Nullable`1.HasValue"/>
        </member>
        <member name="M:CoreSharp.Extensions.GenericExtensions.IsDefault``1(``0)">
            <summary>
            Check if struct has default value.
            </summary>
        </member>
        <member name="M:CoreSharp.Extensions.GenericExtensions.ToXDocument``1(``0)">
            <summary>
            Serialize to XDocument.
            </summary>
        </member>
        <member name="M:CoreSharp.Extensions.GenericExtensions.GetPropertiesDictionary``1(``0)">
            <inheritdoc cref="M:CoreSharp.Extensions.GenericExtensions.GetPropertiesDictionary``1(``0,System.Reflection.BindingFlags)"/>
        </member>
        <member name="M:CoreSharp.Extensions.GenericExtensions.GetPropertiesDictionary``1(``0,System.Reflection.BindingFlags)">
            <summary>
            Convert  item to <see cref="T:System.Collections.Generic.IDictionary`2"/>.
            </summary>
        </member>
        <member name="M:CoreSharp.Extensions.GenericExtensions.GetAttributes``3(``0,System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <inheritdoc cref="M:CoreSharp.Extensions.TypeExtensions.GetAttributes``1(System.Type)"/>
        </member>
        <member name="M:CoreSharp.Extensions.GenericExtensions.GetAttribute``3(``0,System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <inheritdoc cref="M:CoreSharp.Extensions.TypeExtensions.GetAttribute``1(System.Type)"/>
        </member>
        <member name="T:CoreSharp.Extensions.GuidExtensions">
            <summary>
            <see cref="T:System.Guid"/> extensions.
            </summary>
        </member>
        <member name="M:CoreSharp.Extensions.GuidExtensions.IsNullOrEmpty(System.Nullable{System.Guid})">
            <inheritdoc cref="M:CoreSharp.Extensions.GuidExtensions.IsNullOrEmpty(System.Guid)"/>
        </member>
        <member name="M:CoreSharp.Extensions.GuidExtensions.IsNullOrEmpty(System.Guid)">
            <summary>
            Compare given value with <see cref="F:System.Guid.Empty"/>.
            </summary>
        </member>
        <member name="T:CoreSharp.Extensions.HttpResponseMessageExtensions">
            <summary>
            <see cref="T:System.Net.Http.HttpResponseMessage"/> extensions.
            </summary>
        </member>
        <member name="M:CoreSharp.Extensions.HttpResponseMessageExtensions.EnsureSuccessAsync(System.Net.Http.HttpResponseMessage)">
            <summary>
            Ensure <see cref="T:System.Net.Http.HttpResponseMessage" /> was successful using <see cref="P:System.Net.Http.HttpResponseMessage.IsSuccessStatusCode" />.
            Throws <see cref="T:CoreSharp.Models.HttpResponseException" /> if not, including <see cref="P:System.Net.Http.HttpResponseMessage.StatusCode" /> and <see cref="P:System.Net.Http.HttpResponseMessage.Content" />.
            </summary>
        </member>
        <member name="T:CoreSharp.Extensions.ICollectionExtensions">
            <summary>
            <see cref="T:System.Collections.Generic.ICollection`1"/> extensions.
            </summary>
        </member>
        <member name="M:CoreSharp.Extensions.ICollectionExtensions.AddRange``1(System.Collections.Generic.ICollection{``0},System.Collections.Generic.IEnumerable{``0})">
            <inheritdoc cref="M:CoreSharp.Extensions.ICollectionExtensions.AddRange``1(System.Collections.Generic.ICollection{``0},``0[])"/>
        </member>
        <member name="M:CoreSharp.Extensions.ICollectionExtensions.AddRange``1(System.Collections.Generic.ICollection{``0},``0[])">
            <inheritdoc cref="M:System.Collections.Generic.List`1.AddRange(System.Collections.Generic.IEnumerable{`0})"/>
        </member>
        <member name="M:CoreSharp.Extensions.ICollectionExtensions.TryAdd``1(System.Collections.Generic.ICollection{``0},``0)">
            <inheritdoc cref="M:CoreSharp.Extensions.ICollectionExtensions.TryAdd``2(System.Collections.Generic.ICollection{``0},``0,System.Func{``0,``1})"/>
        </member>
        <member name="M:CoreSharp.Extensions.ICollectionExtensions.TryAdd``2(System.Collections.Generic.ICollection{``0},``0,System.Func{``0,``1})">
            <summary>
            Add item in collection only if not already existing.
            </summary>
        </member>
        <member name="T:CoreSharp.Extensions.IComparableExtensions">
            <summary>
            <see cref="T:System.IComparable"/> extensions.
            </summary>
        </member>
        <member name="M:CoreSharp.Extensions.IComparableExtensions.IsBetween``1(``0,``0,``0,System.Boolean)">
            <summary>
            Check if <see cref="T:System.IComparable"/> object is between two values.
            </summary>
        </member>
        <member name="T:CoreSharp.Extensions.IDictionaryExtensions">
            <summary>
            <see cref="T:System.Collections.Generic.IDictionary`2"/> extensions.
            </summary>
        </member>
        <member name="M:CoreSharp.Extensions.IDictionaryExtensions.TryGet``2(System.Collections.Generic.IDictionary{``0,``1},``0,``1@)">
            <inheritdoc cref="M:System.Collections.Generic.IDictionary`2.TryGetValue(`0,`1@)" />
        </member>
        <member name="M:CoreSharp.Extensions.IDictionaryExtensions.TryAdd``2(System.Collections.Generic.IDictionary{``0,``1},``0,``1)">
            <summary>
            Chain calls <see cref="M:System.Collections.Generic.IDictionary`2.ContainsKey(`0)"/> and <see cref="M:System.Collections.Generic.IDictionary`2.Add(`0,`1)"/>.
            </summary>
        </member>
        <member name="M:CoreSharp.Extensions.IDictionaryExtensions.TryRemove``2(System.Collections.Generic.IDictionary{``0,``1},``0)">
            <inheritdoc cref="M:CoreSharp.Extensions.IDictionaryExtensions.TryRemove``2(System.Collections.Generic.IDictionary{``0,``1},``0,``1@)"/>
        </member>
        <member name="M:CoreSharp.Extensions.IDictionaryExtensions.TryRemove``2(System.Collections.Generic.IDictionary{``0,``1},``0,``1@)">
            <summary>
            Chain calls <see cref="M:System.Collections.Generic.IDictionary`2.ContainsKey(`0)"/> and <see cref="M:System.Collections.Generic.IDictionary`2.Remove(`0)"/>.
            </summary>
        </member>
        <member name="M:CoreSharp.Extensions.IDictionaryExtensions.TryUpdate``2(System.Collections.Generic.IDictionary{``0,``1},``0,``1)">
            <inheritdoc cref="M:CoreSharp.Extensions.IDictionaryExtensions.TryUpdate``2(System.Collections.Generic.IDictionary{``0,``1},``0,System.Func{``0,``1,``1})"/>
        </member>
        <member name="M:CoreSharp.Extensions.IDictionaryExtensions.TryUpdate``2(System.Collections.Generic.IDictionary{``0,``1},``0,System.Func{``1,``1})">
            <inheritdoc cref="M:CoreSharp.Extensions.IDictionaryExtensions.TryUpdate``2(System.Collections.Generic.IDictionary{``0,``1},``0,System.Func{``0,``1,``1})"/>
        </member>
        <member name="M:CoreSharp.Extensions.IDictionaryExtensions.TryUpdate``2(System.Collections.Generic.IDictionary{``0,``1},``0,System.Func{``0,``1,``1})">
            <summary>
            Attempts to update the specified key in dictionary, if exists.
            <code>
            dictionary.TryUpdate("key1", (key, value) => value + 5);
            </code>
            </summary>
        </member>
        <member name="M:CoreSharp.Extensions.IDictionaryExtensions.AddOrUpdate``2(System.Collections.Generic.IDictionary{``0,``1},``0,``1)">
            <inheritdoc cref="M:CoreSharp.Extensions.IDictionaryExtensions.AddOrUpdate``2(System.Collections.Generic.IDictionary{``0,``1},``0,``1,System.Func{``0,``1,``1})"/>
        </member>
        <member name="M:CoreSharp.Extensions.IDictionaryExtensions.AddOrUpdate``2(System.Collections.Generic.IDictionary{``0,``1},``0,``1,``1)">
            <inheritdoc cref="M:CoreSharp.Extensions.IDictionaryExtensions.AddOrUpdate``2(System.Collections.Generic.IDictionary{``0,``1},``0,``1,System.Func{``0,``1,``1})"/>
        </member>
        <member name="M:CoreSharp.Extensions.IDictionaryExtensions.AddOrUpdate``2(System.Collections.Generic.IDictionary{``0,``1},``0,``1,System.Func{``1,``1})">
            <inheritdoc cref="M:CoreSharp.Extensions.IDictionaryExtensions.AddOrUpdate``2(System.Collections.Generic.IDictionary{``0,``1},``0,``1,System.Func{``0,``1,``1})"/>
        </member>
        <member name="M:CoreSharp.Extensions.IDictionaryExtensions.AddOrUpdate``2(System.Collections.Generic.IDictionary{``0,``1},``0,``1,System.Func{``0,``1,``1})">
            <summary>
            Attempts to add or update an item with the specified key.
            <code>
            dictionary.AddOrUpdate("key1", (key, value) => value + 5);
            </code>
            </summary>
        </member>
        <member name="M:CoreSharp.Extensions.IDictionaryExtensions.GetOrAdd``2(System.Collections.Generic.IDictionary{``0,``1},``0)">
            <inheritdoc cref="M:CoreSharp.Extensions.IDictionaryExtensions.GetOrAdd``2(System.Collections.Generic.IDictionary{``0,``1},``0,``1)"/>
        </member>
        <member name="M:CoreSharp.Extensions.IDictionaryExtensions.GetOrAdd``2(System.Collections.Generic.IDictionary{``0,``1},``0,``1)">
            <summary>
            If value exists, get, else add and get.
            </summary>
        </member>
        <member name="M:CoreSharp.Extensions.IDictionaryExtensions.ToEnumerable``2(System.Collections.Generic.IDictionary{``0,``1})">
            <summary>
            Converts dictionary to KeyValuePair enumerable.
            </summary>
        </member>
        <member name="M:CoreSharp.Extensions.IDictionaryExtensions.ContainsValue``2(System.Collections.Generic.IDictionary{``0,``1},``1)">
            <summary>
            Returns given value occurrences in dictionary.
            </summary>
        </member>
        <member name="M:CoreSharp.Extensions.IDictionaryExtensions.ToUrlQueryString``1(System.Collections.Generic.IDictionary{System.String,``0})">
            <summary>
            Build url query string from parameters dictionary.
            Converts both key and value to string with default converter.
            </summary>
        </member>
        <member name="T:CoreSharp.Extensions.IEnumerableExtensions">
            <summary>
            <see cref="T:System.Collections.Generic.IEnumerable`1"/> extensions.
            </summary>
        </member>
        <member name="M:CoreSharp.Extensions.IEnumerableExtensions.IsEmpty``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Check if collection is empty.
            </summary>
        </member>
        <member name="M:CoreSharp.Extensions.IEnumerableExtensions.IsNullOrEmpty``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Check if collection is null or empty.
            </summary>
        </member>
        <member name="M:CoreSharp.Extensions.IEnumerableExtensions.OrEmpty``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Return empty collection if source is null.
            </summary>
        </member>
        <member name="M:CoreSharp.Extensions.IEnumerableExtensions.ConvertAll``1(System.Collections.IEnumerable)">
            <summary>
            Convert items to given type.
            </summary>
        </member>
        <member name="M:CoreSharp.Extensions.IEnumerableExtensions.Exclude``1(System.Collections.Generic.IEnumerable{``0},System.Predicate{``0})">
            <summary>
            Exclude items from collection satisfying a condition.
            </summary>
        </member>
        <member name="M:CoreSharp.Extensions.IEnumerableExtensions.Distinct``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
            <summary>
            Return all distinct elements of the given source,
            where "distinctness" is determined via a specified key.
            </summary>
        </member>
        <member name="M:CoreSharp.Extensions.IEnumerableExtensions.StringJoin``1(System.Collections.Generic.IEnumerable{``0})">
            <inheritdoc cref="M:CoreSharp.Extensions.IEnumerableExtensions.StringJoin``1(System.Collections.Generic.IEnumerable{``0},System.String,System.String,System.IFormatProvider)"/>
        </member>
        <member name="M:CoreSharp.Extensions.IEnumerableExtensions.StringJoinCI``1(System.Collections.Generic.IEnumerable{``0})">
            <inheritdoc cref="M:CoreSharp.Extensions.IEnumerableExtensions.StringJoin``1(System.Collections.Generic.IEnumerable{``0},System.String,System.String,System.IFormatProvider)"/>
        </member>
        <member name="M:CoreSharp.Extensions.IEnumerableExtensions.StringJoin``1(System.Collections.Generic.IEnumerable{``0},System.String)">
            <inheritdoc cref="M:CoreSharp.Extensions.IEnumerableExtensions.StringJoin``1(System.Collections.Generic.IEnumerable{``0},System.String,System.String,System.IFormatProvider)"/>
        </member>
        <member name="M:CoreSharp.Extensions.IEnumerableExtensions.StringJoinCI``1(System.Collections.Generic.IEnumerable{``0},System.String)">
            <inheritdoc cref="M:CoreSharp.Extensions.IEnumerableExtensions.StringJoin``1(System.Collections.Generic.IEnumerable{``0},System.String,System.String,System.IFormatProvider)"/>
        </member>
        <member name="M:CoreSharp.Extensions.IEnumerableExtensions.StringJoin``1(System.Collections.Generic.IEnumerable{``0},System.String,System.String)">
            <inheritdoc cref="M:CoreSharp.Extensions.IEnumerableExtensions.StringJoin``1(System.Collections.Generic.IEnumerable{``0},System.String,System.String,System.IFormatProvider)"/>
        </member>
        <member name="M:CoreSharp.Extensions.IEnumerableExtensions.StringJoinCI``1(System.Collections.Generic.IEnumerable{``0},System.String,System.String)">
            <inheritdoc cref="M:CoreSharp.Extensions.IEnumerableExtensions.StringJoin``1(System.Collections.Generic.IEnumerable{``0},System.String,System.String,System.IFormatProvider)"/>
        </member>
        <member name="M:CoreSharp.Extensions.IEnumerableExtensions.StringJoin``1(System.Collections.Generic.IEnumerable{``0},System.String,System.IFormatProvider)">
            <inheritdoc cref="M:CoreSharp.Extensions.IEnumerableExtensions.StringJoin``1(System.Collections.Generic.IEnumerable{``0},System.String,System.String,System.IFormatProvider)"/>
        </member>
        <member name="M:CoreSharp.Extensions.IEnumerableExtensions.StringJoin``1(System.Collections.Generic.IEnumerable{``0},System.IFormatProvider)">
            <inheritdoc cref="M:CoreSharp.Extensions.IEnumerableExtensions.StringJoin``1(System.Collections.Generic.IEnumerable{``0},System.String,System.String,System.IFormatProvider)"/>
        </member>
        <member name="M:CoreSharp.Extensions.IEnumerableExtensions.StringJoin``1(System.Collections.Generic.IEnumerable{``0},System.String,System.String,System.IFormatProvider)">
            <summary>
            Concatenates the elements of a specified array or the members of a collection,
            using the specified separator between each element or member.
            </summary>
        </member>
        <member name="M:CoreSharp.Extensions.IEnumerableExtensions.ToHashSet``1(System.Collections.Generic.IEnumerable{``0})">
            <inheritdoc cref="M:CoreSharp.Extensions.IEnumerableExtensions.ToHashSet``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})"/>
        </member>
        <member name="M:CoreSharp.Extensions.IEnumerableExtensions.ToHashSet``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
            <inheritdoc cref="M:CoreSharp.Extensions.IEnumerableExtensions.ToHashSet``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})"/>
        </member>
        <member name="M:CoreSharp.Extensions.IEnumerableExtensions.ToHashSet``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Create a <see cref="T:System.Collections.Generic.HashSet`1"/> from an <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </summary>
        </member>
        <member name="M:CoreSharp.Extensions.IEnumerableExtensions.ToCollection``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Create a <see cref="T:System.Collections.ObjectModel.Collection`1"/> from an <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </summary>
        </member>
        <member name="M:CoreSharp.Extensions.IEnumerableExtensions.ToObservableCollection``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Create a <see cref="T:System.Collections.ObjectModel.ObservableCollection`1"/> from an <see cref="T:System.Collections.ObjectModel.ObservableCollection`1"/>.
            </summary>
        </member>
        <member name="M:CoreSharp.Extensions.IEnumerableExtensions.TakeSkip``1(System.Collections.Generic.IEnumerable{``0},System.Int32[])">
            <summary>
            Take/Skip items in a given order.
            Positive Chunk value means take.
            Negative Chunk value means skips.
            </summary>
            <example>
            In this sample we Take(2), then Skip(3), then Take(1).
            <code>
            var source = GetSource();
            var sequence = source.TakeSkip(2, -3, 1);
            </code>
            </example>
        </member>
        <member name="M:CoreSharp.Extensions.IEnumerableExtensions.Except``2(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
            <summary>
            LINQ Except(), using a key for equality comparison.
            </summary>
        </member>
        <member name="M:CoreSharp.Extensions.IEnumerableExtensions.Intersect``2(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
            <summary>
            LINQ Intersect(), using a key for equality comparison.
            </summary>
        </member>
        <member name="M:CoreSharp.Extensions.IEnumerableExtensions.Flatten``1(System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{``0}})">
            <summary>
            Flatten the nested sequence.
            </summary>
        </member>
        <member name="M:CoreSharp.Extensions.IEnumerableExtensions.Append``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
            <inheritdoc cref="M:CoreSharp.Extensions.IEnumerableExtensions.Append``1(System.Collections.Generic.IEnumerable{``0},``0[])"/>
        </member>
        <member name="M:CoreSharp.Extensions.IEnumerableExtensions.Append``1(System.Collections.Generic.IEnumerable{``0},``0[])">
            <summary>
            Append items to given source.
            </summary>
        </member>
        <member name="M:CoreSharp.Extensions.IEnumerableExtensions.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})">
            <inheritdoc cref="M:CoreSharp.Extensions.IEnumerableExtensions.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0,System.Int32})"/>
        </member>
        <member name="M:CoreSharp.Extensions.IEnumerableExtensions.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0,System.Int32})">
            <summary>
            Perform an action to all elements. Each element's index is used in the logic of the action.
            </summary>
        </member>
        <member name="M:CoreSharp.Extensions.IEnumerableExtensions.Mutate``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Mutate sequence reference.
            </summary>
        </member>
        <member name="M:CoreSharp.Extensions.IEnumerableExtensions.Contains``2(System.Collections.Generic.IEnumerable{``0},``0,System.Func{``0,``1})">
            <summary>
            Check if source contains a specific item, using a key for equality comparison.
            </summary>
        </member>
        <member name="M:CoreSharp.Extensions.IEnumerableExtensions.Paginate``1(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Int32)">
            <inheritdoc cref="M:CoreSharp.Extensions.IQueryableExtensions.GetPage``1(System.Linq.IQueryable{``0},System.Int32,System.Int32)"/>
        </member>
        <member name="M:CoreSharp.Extensions.IEnumerableExtensions.GetPages``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <summary>
            Paginate collection on given size and group them by Group.Key = Page.Index.
            </summary>
        </member>
        <member name="M:CoreSharp.Extensions.IEnumerableExtensions.ContainsAll``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
            <inheritdoc cref="M:CoreSharp.Extensions.IEnumerableExtensions.ContainsAll``1(System.Collections.Generic.IEnumerable{``0},``0[])"/>
        </member>
        <member name="M:CoreSharp.Extensions.IEnumerableExtensions.ContainsAll``1(System.Collections.Generic.IEnumerable{``0},``0[])">
            <summary>
            Check if source contains all given items.
            </summary>
        </member>
        <member name="M:CoreSharp.Extensions.IEnumerableExtensions.ToCsvStream``1(System.Collections.Generic.IEnumerable{``0},System.Char,System.Boolean,System.Text.Encoding,System.Threading.CancellationToken)">
            <summary>
            Convert collection of items to csv <see cref="T:System.IO.Stream"/>.
            </summary>
        </member>
        <member name="M:CoreSharp.Extensions.IEnumerableExtensions.GetDuplicates``1(System.Collections.Generic.IEnumerable{``0})">
            <inheritdoc cref="M:CoreSharp.Extensions.IEnumerableExtensions.GetDuplicates``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})"/>
        </member>
        <member name="M:CoreSharp.Extensions.IEnumerableExtensions.GetDuplicates``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
            <summary>
            Get key-count combination for duplicate entries.
            </summary>
        </member>
        <member name="M:CoreSharp.Extensions.IEnumerableExtensions.HasDuplicates``1(System.Collections.Generic.IEnumerable{``0})">
            <inheritdoc cref="M:CoreSharp.Extensions.IEnumerableExtensions.HasDuplicates``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})"/>
        </member>
        <member name="M:CoreSharp.Extensions.IEnumerableExtensions.HasDuplicates``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
            <summary>
            Check if there are any duplicate entries.
            </summary>
        </member>
        <member name="M:CoreSharp.Extensions.IEnumerableExtensions.ToDataTable``1(System.Collections.Generic.IEnumerable{``0})">
            <inheritdoc cref="M:CoreSharp.Extensions.IEnumerableExtensions.ToDataTable``1(System.Collections.Generic.IEnumerable{``0},System.String)"/>
        </member>
        <member name="M:CoreSharp.Extensions.IEnumerableExtensions.ToDataTable``1(System.Collections.Generic.IEnumerable{``0},System.String)">
            <summary>
            Convert collection of entities to DataTable.
            </summary>
        </member>
        <member name="M:CoreSharp.Extensions.IEnumerableExtensions.StartsWith``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
            <inheritdoc cref="M:CoreSharp.Extensions.IEnumerableExtensions.StartsWith``1(System.Collections.Generic.IEnumerable{``0},``0[])"/>
        </member>
        <member name="M:CoreSharp.Extensions.IEnumerableExtensions.StartsWith``1(System.Collections.Generic.IEnumerable{``0},``0[])">
            <summary>
            Check if given source starts with given sequence.
            </summary>
        </member>
        <member name="M:CoreSharp.Extensions.IEnumerableExtensions.EndsWith``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
            <inheritdoc cref="M:CoreSharp.Extensions.IEnumerableExtensions.EndsWith``1(System.Collections.Generic.IEnumerable{``0},``0[])"/>
        </member>
        <member name="M:CoreSharp.Extensions.IEnumerableExtensions.EndsWith``1(System.Collections.Generic.IEnumerable{``0},``0[])">
            <summary>
            Check if given source ends with given sequence.
            </summary>
        </member>
        <member name="M:CoreSharp.Extensions.IEnumerableExtensions.FilterFlexible(System.Collections.Generic.IEnumerable{System.String},System.String)">
            <inheritdoc cref="M:CoreSharp.Extensions.IQueryableExtensions.FilterFlexible``1(System.Linq.IQueryable{``0},System.Func{``0,System.String},System.String)"/>
        </member>
        <member name="M:CoreSharp.Extensions.IEnumerableExtensions.FilterFlexible``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.String},System.String)">
            <inheritdoc cref="M:CoreSharp.Extensions.IQueryableExtensions.FilterFlexible``1(System.Linq.IQueryable{``0},System.Func{``0,System.String},System.String)"/>
        </member>
        <member name="M:CoreSharp.Extensions.IEnumerableExtensions.Chunk``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <summary>
            Split the elements of a sequence into chunks of size at most size.
            </summary>
        </member>
        <member name="M:CoreSharp.Extensions.IEnumerableExtensions.ChunkInternal``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <inheritdoc cref="M:CoreSharp.Extensions.IEnumerableExtensions.Chunk``1(System.Collections.Generic.IEnumerable{``0},System.Int32)"/>
        </member>
        <member name="M:CoreSharp.Extensions.IEnumerableExtensions.FirstOr``1(System.Collections.Generic.IEnumerable{``0},``0)">
            <inheritdoc cref="M:CoreSharp.Extensions.IEnumerableExtensions.FirstOr``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean},``0)" />
        </member>
        <member name="M:CoreSharp.Extensions.IEnumerableExtensions.FirstOr``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean},``0)">
            <inheritdoc cref="M:System.Linq.Enumerable.FirstOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})"/>>
        </member>
        <member name="M:CoreSharp.Extensions.IEnumerableExtensions.LastOr``1(System.Collections.Generic.IEnumerable{``0},``0)">
            <inheritdoc cref="M:CoreSharp.Extensions.IEnumerableExtensions.LastOr``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean},``0)" />
        </member>
        <member name="M:CoreSharp.Extensions.IEnumerableExtensions.LastOr``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean},``0)">
            <inheritdoc cref="M:System.Linq.Enumerable.LastOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})"/>>
        </member>
        <member name="M:CoreSharp.Extensions.IEnumerableExtensions.SingleOr``1(System.Collections.Generic.IEnumerable{``0},``0)">
            <inheritdoc cref="M:CoreSharp.Extensions.IEnumerableExtensions.SingleOr``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean},``0)" />
        </member>
        <member name="M:CoreSharp.Extensions.IEnumerableExtensions.SingleOr``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean},``0)">
            <inheritdoc cref="M:System.Linq.Enumerable.SingleOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})"/>>
        </member>
        <member name="M:CoreSharp.Extensions.IEnumerableExtensions.Map``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})">
            <inheritdoc cref="M:CoreSharp.Extensions.IEnumerableExtensions.Map``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0,System.Int32})"/>>
        </member>
        <member name="M:CoreSharp.Extensions.IEnumerableExtensions.Map``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0,System.Int32})">
            <summary>
            Format collection items with given expression.
            </summary>
        </member>
        <member name="T:CoreSharp.Extensions.IListExtensions">
            <summary>
            <see cref="T:System.Collections.Generic.IList`1"/> extensions.
            </summary>
        </member>
        <member name="M:CoreSharp.Extensions.IListExtensions.Fill``1(System.Collections.Generic.IList{``0},``0)">
            <summary>
            Fill list with given value.
            </summary>
        </member>
        <member name="M:CoreSharp.Extensions.IListExtensions.Remove``1(System.Collections.Generic.IList{``0},System.Func{``0,System.Boolean})">
            <summary>
            Remove all occurrences of items that match given expression.
            </summary>
        </member>
        <member name="M:CoreSharp.Extensions.IListExtensions.InsertRange``1(System.Collections.Generic.IList{``0},System.Int32,System.Collections.Generic.IEnumerable{``0})">
            <inheritdoc cref="M:CoreSharp.Extensions.IListExtensions.InsertRange``1(System.Collections.Generic.IList{``0},System.Int32,``0[])"/>
        </member>
        <member name="M:CoreSharp.Extensions.IListExtensions.InsertRange``1(System.Collections.Generic.IList{``0},System.Int32,``0[])">
            <summary>
            Insert range in given position.
            </summary>
        </member>
        <member name="T:CoreSharp.Extensions.IntExtensions">
            <summary>
            <see cref="T:System.Int32"/> extensions.
            </summary>
        </member>
        <member name="M:CoreSharp.Extensions.IntExtensions.Map(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <inheritdoc cref="M:CoreSharp.Extensions.DecimalExtensions.Map(System.Decimal,System.Decimal,System.Decimal,System.Decimal,System.Decimal)"/>
        </member>
        <member name="M:CoreSharp.Extensions.IntExtensions.January(System.Int32,System.Int32)">
            <summary>
            Returns a <see cref="T:System.DateTime"/> representing the specified day
            in January in the specified year.
            </summary>
        </member>
        <member name="M:CoreSharp.Extensions.IntExtensions.February(System.Int32,System.Int32)">
            <summary>
            Returns a <see cref="T:System.DateTime"/> representing the specified day
            in February in the specified year.
            </summary>
        </member>
        <member name="M:CoreSharp.Extensions.IntExtensions.March(System.Int32,System.Int32)">
            <summary>
            Returns a <see cref="T:System.DateTime"/> representing the specified day
            in March in the specified year.
            </summary>
        </member>
        <member name="M:CoreSharp.Extensions.IntExtensions.April(System.Int32,System.Int32)">
            <summary>
            Returns a <see cref="T:System.DateTime"/> representing the specified day
            in April in the specified year.
            </summary>
        </member>
        <member name="M:CoreSharp.Extensions.IntExtensions.May(System.Int32,System.Int32)">
            <summary>
            Returns a <see cref="T:System.DateTime"/> representing the specified day
            in May in the specified year.
            </summary>
        </member>
        <member name="M:CoreSharp.Extensions.IntExtensions.June(System.Int32,System.Int32)">
            <summary>
            Returns a <see cref="T:System.DateTime"/> representing the specified day
            in June in the specified year.
            </summary>
        </member>
        <member name="M:CoreSharp.Extensions.IntExtensions.July(System.Int32,System.Int32)">
            <summary>
            Returns a <see cref="T:System.DateTime"/> representing the specified day
            in July in the specified year.
            </summary>
        </member>
        <member name="M:CoreSharp.Extensions.IntExtensions.August(System.Int32,System.Int32)">
            <summary>
            Returns a <see cref="T:System.DateTime"/> representing the specified day
            in August in the specified year.
            </summary>
        </member>
        <member name="M:CoreSharp.Extensions.IntExtensions.September(System.Int32,System.Int32)">
            <summary>
            Returns a <see cref="T:System.DateTime"/> representing the specified day
            in September in the specified year.
            </summary>
        </member>
        <member name="M:CoreSharp.Extensions.IntExtensions.October(System.Int32,System.Int32)">
            <summary>
            Returns a <see cref="T:System.DateTime"/> representing the specified day
            in October in the specified year.
            </summary>
        </member>
        <member name="M:CoreSharp.Extensions.IntExtensions.November(System.Int32,System.Int32)">
            <summary>
            Returns a <see cref="T:System.DateTime"/> representing the specified day
            in November in the specified year.
            </summary>
        </member>
        <member name="M:CoreSharp.Extensions.IntExtensions.December(System.Int32,System.Int32)">
            <summary>
            Returns a <see cref="T:System.DateTime"/> representing the specified day in
            December in the specified year.
            </summary>
        </member>
        <member name="T:CoreSharp.Extensions.IPAddressExtensions">
            <summary>
            <see cref="T:System.Net.IPAddress"/> extensions.
            </summary>
        </member>
        <member name="M:CoreSharp.Extensions.IPAddressExtensions.Ping(System.Net.IPAddress,System.Int32)">
            <inheritdoc cref="M:CoreSharp.Extensions.IPAddressExtensions.PingAsync(System.Net.IPAddress,System.Int32)"/>
        </member>
        <member name="M:CoreSharp.Extensions.IPAddressExtensions.PingAsync(System.Net.IPAddress,System.Int32)">
            <inheritdoc cref="M:System.Net.NetworkInformation.Ping.SendPingAsync(System.String,System.Int32)"/>
        </member>
        <member name="T:CoreSharp.Extensions.IPEndPointExtensions">
            <summary>
            <see cref="T:System.Net.IPEndPoint"/> extensions.
            </summary>
        </member>
        <member name="M:CoreSharp.Extensions.IPEndPointExtensions.Ping(System.Net.IPEndPoint,System.Int32)">
            <inheritdoc cref="M:CoreSharp.Extensions.IPEndPointExtensions.PingAsync(System.Net.IPEndPoint,System.Int32)"/>
        </member>
        <member name="M:CoreSharp.Extensions.IPEndPointExtensions.PingAsync(System.Net.IPEndPoint,System.Int32)">
            <inheritdoc cref="M:CoreSharp.Extensions.IPAddressExtensions.PingAsync(System.Net.IPAddress,System.Int32)"/>
        </member>
        <member name="T:CoreSharp.Extensions.IQueryableExtensions">
            <summary>
            <see cref="T:System.Linq.IQueryable`1"/> extensions.
            </summary>
        </member>
        <member name="M:CoreSharp.Extensions.IQueryableExtensions.GetPage``1(System.Linq.IQueryable{``0},System.Int32,System.Int32)">
            <inheritdoc cref="M:CoreSharp.Extensions.IQueryableExtensions.GetPageAsync``1(System.Linq.IQueryable{``0},System.Int32,System.Int32,System.Threading.CancellationToken)"/>
        </member>
        <member name="M:CoreSharp.Extensions.IQueryableExtensions.GetPageAsync``1(System.Linq.IQueryable{``0},System.Int32,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Paginate collection on given size and return page of given number.
            </summary>
        </member>
        <member name="M:CoreSharp.Extensions.IQueryableExtensions.FilterFlexible(System.Linq.IQueryable{System.String},System.String)">
            <inheritdoc cref="M:CoreSharp.Extensions.IQueryableExtensions.FilterFlexible``1(System.Linq.IQueryable{``0},System.Func{``0,System.String},System.String)"/>
        </member>
        <member name="M:CoreSharp.Extensions.IQueryableExtensions.FilterFlexible``1(System.Linq.IQueryable{``0},System.Func{``0,System.String},System.String)">
            <summary>
            Filter source by given value.
            In-between characters are allowed in filtering value.
            <example>
            <code>
            var source = new [] { "a", "b", "ab", ".a.b.", "AB", "ba" };
            var filter = "ab";
            var result = source.FilterFlexible(filter); // "ab", ".a.b.", "AB"
            </code>
            </example>
            </summary>
        </member>
        <member name="T:CoreSharp.Extensions.IServiceProviderExtensions">
            <summary>
            <see cref="T:System.IServiceProvider"/> extensions.
            </summary>
        </member>
        <member name="M:CoreSharp.Extensions.IServiceProviderExtensions.GetService``1(System.IServiceProvider)">
            <inheritdoc cref="M:System.IServiceProvider.GetService(System.Type)"/>
        </member>
        <member name="T:CoreSharp.Extensions.LambdaExpressionExtensions">
            <summary>
            <see cref="T:System.Linq.Expressions.LambdaExpression"/> extensions.
            </summary>
        </member>
        <member name="M:CoreSharp.Extensions.LambdaExpressionExtensions.GetMemberName(System.Linq.Expressions.LambdaExpression)">
            <summary>
            Get expression member name.
            </summary>
        </member>
        <member name="T:CoreSharp.Extensions.ListExtensions">
            <summary>
            <see cref="T:System.Collections.Generic.List`1"/> extensions.
            </summary>
        </member>
        <member name="M:CoreSharp.Extensions.ListExtensions.Sort``2(System.Collections.Generic.List{``0},System.Func{``0,``1})">
            <inheritdoc cref="M:System.Collections.Generic.List`1.Sort(System.Collections.Generic.IComparer{`0})" />
        </member>
        <member name="T:CoreSharp.Extensions.MemberInfoExtensions">
            <summary>
            <see cref="T:System.Reflection.MemberInfo"/> extensions.
            </summary>
        </member>
        <member name="M:CoreSharp.Extensions.MemberInfoExtensions.GetAttributes``1(System.Reflection.MemberInfo)">
            <inheritdoc cref="M:CoreSharp.Extensions.TypeExtensions.GetAttributes``1(System.Type)" />
        </member>
        <member name="M:CoreSharp.Extensions.MemberInfoExtensions.GetAttribute``1(System.Reflection.MemberInfo)">
            <inheritdoc cref="M:CoreSharp.Extensions.TypeExtensions.GetAttribute``1(System.Type)" />
        </member>
        <member name="T:CoreSharp.Extensions.NameValueCollectionExtensions">
            <summary>
            <see cref="T:System.Collections.Specialized.NameValueCollection"/> extensions.
            </summary>
        </member>
        <member name="M:CoreSharp.Extensions.NameValueCollectionExtensions.ToUrlQueryString(System.Collections.Specialized.NameValueCollection)">
            <inheritdoc cref="M:CoreSharp.Extensions.IDictionaryExtensions.ToUrlQueryString``1(System.Collections.Generic.IDictionary{System.String,``0})"/>
        </member>
        <member name="T:CoreSharp.Extensions.NumberFormatInfoExtensions">
            <summary>
            <see cref="T:System.Globalization.NumberFormatInfo"/> extensions.
            </summary>
        </member>
        <member name="M:CoreSharp.Extensions.NumberFormatInfoExtensions.SetCurrencyPositivePattern(System.Globalization.NumberFormatInfo,CoreSharp.Enums.CurrencyPositivePattern)">
            <summary>
            Map given <see cref="T:CoreSharp.Enums.CurrencyPositivePattern"/> to <see cref="P:System.Globalization.NumberFormatInfo.CurrencyPositivePattern"/>.
            </summary>
        </member>
        <member name="M:CoreSharp.Extensions.NumberFormatInfoExtensions.SetCurrencyNegativePattern(System.Globalization.NumberFormatInfo,CoreSharp.Enums.CurrencyNegativePattern)">
            <summary>
            Map given <see cref="T:CoreSharp.Enums.CurrencyNegativePattern"/> to <see cref="P:System.Globalization.NumberFormatInfo.CurrencyNegativePattern"/>.
            </summary>
        </member>
        <member name="M:CoreSharp.Extensions.NumberFormatInfoExtensions.SetNumberNegativePattern(System.Globalization.NumberFormatInfo,CoreSharp.Enums.NumberNegativePattern)">
            <summary>
            Map given <see cref="T:CoreSharp.Enums.NumberNegativePattern"/> to <see cref="P:System.Globalization.NumberFormatInfo.NumberNegativePattern"/>.
            </summary>
        </member>
        <member name="M:CoreSharp.Extensions.NumberFormatInfoExtensions.GetCurrencyPositivePattern(System.Globalization.NumberFormatInfo)">
            <summary>
            Map given <see cref="P:System.Globalization.NumberFormatInfo.CurrencyPositivePattern"/> to <see cref="T:CoreSharp.Enums.CurrencyPositivePattern"/>.
            </summary>
        </member>
        <member name="M:CoreSharp.Extensions.NumberFormatInfoExtensions.GetCurrencyNegativePattern(System.Globalization.NumberFormatInfo)">
            <summary>
            Map given <see cref="P:System.Globalization.NumberFormatInfo.CurrencyNegativePattern"/> to <see cref="T:CoreSharp.Enums.CurrencyNegativePattern"/>.
            </summary>
        </member>
        <member name="M:CoreSharp.Extensions.NumberFormatInfoExtensions.GetNumberNegativePattern(System.Globalization.NumberFormatInfo)">
            <summary>
            Map given <see cref="P:System.Globalization.NumberFormatInfo.NumberNegativePattern"/> to <see cref="T:CoreSharp.Enums.NumberNegativePattern"/>.
            </summary>
        </member>
        <member name="T:CoreSharp.Extensions.ObjectExtensions">
            <summary>
            <see cref="T:System.Object"/> extensions.
            </summary>
        </member>
        <member name="M:CoreSharp.Extensions.ObjectExtensions.AsOrDefault``1(System.Object)">
            <inheritdoc cref="M:CoreSharp.Extensions.ObjectExtensions.AsOrDefault``1(System.Object,``0)"/>
        </member>
        <member name="M:CoreSharp.Extensions.ObjectExtensions.AsOrDefault``1(System.Object,``0)">
            <summary>
            Try casting input to given type and
            return default if null or of different type.
            </summary>
        </member>
        <member name="M:CoreSharp.Extensions.ObjectExtensions.ChangeType``1(System.Object)">
            <inheritdoc cref="M:CoreSharp.Extensions.ObjectExtensions.ChangeType``1(System.Object,System.Globalization.CultureInfo)"/>
        </member>
        <member name="M:CoreSharp.Extensions.ObjectExtensions.ChangeType``1(System.Object,System.Globalization.CultureInfo)">
            <inheritdoc cref="M:System.Convert.ChangeType(System.Object,System.Type,System.IFormatProvider)" />
        </member>
        <member name="T:CoreSharp.Extensions.RandomExtensions">
            <summary>
            <see cref="T:System.Random"/> extensions.
            </summary>
        </member>
        <member name="M:CoreSharp.Extensions.RandomExtensions.CoinToss(System.Random)">
            <summary>
            Return <see langword="true"/> or <see langword="false"/>.
            </summary>
        </member>
        <member name="M:CoreSharp.Extensions.RandomExtensions.OneOf``1(System.Random,System.Collections.Generic.IEnumerable{``0})">
            <inheritdoc cref="M:CoreSharp.Extensions.RandomExtensions.OneOf``1(System.Random,``0[])"/>
        </member>
        <member name="M:CoreSharp.Extensions.RandomExtensions.OneOf``1(System.Random,``0[])">
            <summary>
            Return random value from list of values.
            </summary>
        </member>
        <member name="M:CoreSharp.Extensions.RandomExtensions.NextDouble(System.Random,System.Double)">
            <inheritdoc cref="M:CoreSharp.Extensions.RandomExtensions.NextDouble(System.Random,System.Double)"/>
        </member>
        <member name="M:CoreSharp.Extensions.RandomExtensions.NextDouble(System.Random,System.Double,System.Double)">
            <summary>
            Get random double in given range.
            </summary>
        </member>
        <member name="M:CoreSharp.Extensions.RandomExtensions.NextString(System.Random)">
            <inheritdoc cref="M:CoreSharp.Extensions.RandomExtensions.NextString(System.Random,System.Int32)"/>
        </member>
        <member name="M:CoreSharp.Extensions.RandomExtensions.NextString(System.Random,System.Int32)">
            <summary>
            Generate random string containing A-Z, a-z, 0-1.
            </summary>
        </member>
        <member name="M:CoreSharp.Extensions.RandomExtensions.ChanceGreaterThan(System.Random,System.Double,System.Boolean)">
            <summary>
            Check is percentage chance is greater than a given value.
            </summary>
        </member>
        <member name="M:CoreSharp.Extensions.RandomExtensions.ChanceLowerThan(System.Random,System.Double,System.Boolean)">
            <summary>
            Check is percentage chance is lower than a given value.
            </summary>
        </member>
        <member name="M:CoreSharp.Extensions.RandomExtensions.ChanceBetween(System.Random,System.Double,System.Double,System.Boolean)">
            <summary>
            Check is percentage chance is between two limits (including limits).
            </summary>
        </member>
        <member name="M:CoreSharp.Extensions.RandomExtensions.Shuffle``1(System.Random,System.Collections.Generic.IList{``0})">
            <summary>
            Shuffle IList.
            </summary>
        </member>
        <member name="T:CoreSharp.Extensions.SerialPortExtensions">
            <summary>
            <see cref="T:System.IO.Ports.SerialPort"/> extensions.
            </summary>
        </member>
        <member name="M:CoreSharp.Extensions.SerialPortExtensions.GetSettings(System.IO.Ports.SerialPort)">
            <summary>
            Extract <see cref="T:CoreSharp.Models.SerialPortSettings"/> from given <see cref="T:System.IO.Ports.SerialPort"/>.
            </summary>
        </member>
        <member name="T:CoreSharp.Extensions.SizeExtensions">
            <summary>
            <see cref="T:System.Drawing.Size"/> extensions.
            </summary>
        </member>
        <member name="M:CoreSharp.Extensions.SizeExtensions.ToSizeF(System.Drawing.Size)">
            <summary>
            Convert <see cref="T:System.Drawing.Size"/> to <see cref="T:System.Drawing.SizeF"/>.
            </summary>
        </member>
        <member name="M:CoreSharp.Extensions.SizeExtensions.Scale(System.Drawing.Size,System.Drawing.Size)">
            <inheritdoc cref="M:CoreSharp.Extensions.SizeFExtensions.Scale(System.Drawing.SizeF,System.Drawing.SizeF)"/>
        </member>
        <member name="T:CoreSharp.Extensions.SizeFExtensions">
            <summary>
            <see cref="T:System.Drawing.SizeF"/> extensions.
            </summary>
        </member>
        <member name="M:CoreSharp.Extensions.SizeFExtensions.ToSize(System.Drawing.SizeF)">
            <summary>
            Convert <see cref="T:System.Drawing.SizeF"/> to <see cref="T:System.Drawing.Size"/>.
            </summary>
        </member>
        <member name="M:CoreSharp.Extensions.SizeFExtensions.Scale(System.Drawing.SizeF,System.Drawing.SizeF)">
            <summary>
            Scale size proportionally.
            </summary>
        </member>
        <member name="T:CoreSharp.Extensions.SocketExtensions">
            <summary>
            <see cref="T:System.Net.Sockets.Socket"/> extensions.
            </summary>
        </member>
        <member name="M:CoreSharp.Extensions.SocketExtensions.IsConnected(System.Net.Sockets.Socket,System.Int32)">
            <inheritdoc cref="M:CoreSharp.Extensions.SocketExtensions.IsConnectedAsync(System.Net.Sockets.Socket,System.Int32)" />
        </member>
        <member name="M:CoreSharp.Extensions.SocketExtensions.IsConnectedAsync(System.Net.Sockets.Socket,System.Int32)">
            <summary>
            Check if <see cref="T:System.Net.Sockets.Socket"/> is connected using simple flag polling and pinging.
            </summary>
        </member>
        <member name="T:CoreSharp.Extensions.StreamExtensions">
            <summary>
            <see cref="T:System.IO.Stream"/> extensions.
            </summary>
        </member>
        <member name="M:CoreSharp.Extensions.StreamExtensions.ToEntity``1(System.IO.Stream)">
            <inheritdoc cref="M:CoreSharp.Extensions.StreamExtensions.ToEntity(System.IO.Stream,System.Type,Newtonsoft.Json.JsonSerializerSettings)"/>
        </member>
        <member name="M:CoreSharp.Extensions.StreamExtensions.ToEntity(System.IO.Stream,System.Type)">
            <inheritdoc cref="M:CoreSharp.Extensions.StreamExtensions.ToEntity(System.IO.Stream,System.Type,Newtonsoft.Json.JsonSerializerSettings)"/>
        </member>
        <member name="M:CoreSharp.Extensions.StreamExtensions.ToEntity``1(System.IO.Stream,Newtonsoft.Json.JsonSerializerSettings)">
            <inheritdoc cref="M:CoreSharp.Extensions.StreamExtensions.ToEntity(System.IO.Stream,System.Type,Newtonsoft.Json.JsonSerializerSettings)"/>
        </member>
        <member name="M:CoreSharp.Extensions.StreamExtensions.ToEntity(System.IO.Stream,System.Type,Newtonsoft.Json.JsonSerializerSettings)">
            <summary>
            Parse <see cref="T:System.IO.Stream"/> json to entity.
            </summary>
        </member>
        <member name="M:CoreSharp.Extensions.StreamExtensions.ToFileAsync(System.IO.Stream,System.String,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Write <see cref="T:System.IO.Stream"/> to physical file.
            </summary>
        </member>
        <member name="M:CoreSharp.Extensions.StreamExtensions.ToStringAsync(System.IO.Stream,System.Text.Encoding)">
            <summary>
            Read <see cref="T:System.IO.Stream"/> to <see cref="T:System.String"/>.
            </summary>
        </member>
        <member name="T:CoreSharp.Extensions.StringBuilderExtensions">
            <summary>
            <see cref="T:CoreSharp.Extensions.StringBuilderExtensions"/> extensions.
            </summary>
        </member>
        <member name="M:CoreSharp.Extensions.StringBuilderExtensions.AppendFormatLine(System.Text.StringBuilder,System.String,System.Object[])">
            <inheritdoc cref="M:CoreSharp.Extensions.StringBuilderExtensions.AppendFormatLine(System.Text.StringBuilder,System.IFormatProvider,System.String,System.Object[])"/>
        </member>
        <member name="M:CoreSharp.Extensions.StringBuilderExtensions.AppendFormatLineCI(System.Text.StringBuilder,System.String,System.Object[])">
            <inheritdoc cref="M:CoreSharp.Extensions.StringBuilderExtensions.AppendFormatLine(System.Text.StringBuilder,System.IFormatProvider,System.String,System.Object[])"/>
        </member>
        <member name="M:CoreSharp.Extensions.StringBuilderExtensions.AppendFormatLine(System.Text.StringBuilder,System.IFormatProvider,System.String,System.Object[])">
            <summary>
            Chain calls <see cref="M:System.Text.StringBuilder.AppendFormat(System.IFormatProvider,System.String,System.Object[])"/> + <see cref="M:System.Text.StringBuilder.AppendLine(System.String)"/>.
            </summary>
        </member>
        <member name="T:CoreSharp.Extensions.StringExtensions">
            <summary>
            <see cref="T:System.String"/> extensions.
            </summary>
        </member>
        <member name="M:CoreSharp.Extensions.StringExtensions.Truncate(System.String,System.Int32)">
            <summary>
            Truncates <see cref="T:System.String"/>.
            </summary>
        </member>
        <member name="M:CoreSharp.Extensions.StringExtensions.FormatAsciiControls(System.String,System.Char,System.Char)">
            <summary>
            Replace each ASCII control character with its corresponding abbreviation.
            </summary>
        </member>
        <member name="M:CoreSharp.Extensions.StringExtensions.Chunk(System.String,System.Int32)">
            <inheritdoc cref="M:CoreSharp.Extensions.IEnumerableExtensions.Chunk``1(System.Collections.Generic.IEnumerable{``0},System.Int32)"/>
        </member>
        <member name="M:CoreSharp.Extensions.StringExtensions.PadCenter(System.String,System.Int32,System.Char)">
            <summary>
            Center align text.
            </summary>
        </member>
        <member name="M:CoreSharp.Extensions.StringExtensions.RemoveFirst(System.String,System.String)">
            <summary>
            Removes the first occurence of a given value.
            </summary>
        </member>
        <member name="M:CoreSharp.Extensions.StringExtensions.RemoveLast(System.String,System.String)">
            <summary>
            Removes the last occurence of a given value.
            </summary>
        </member>
        <member name="M:CoreSharp.Extensions.StringExtensions.RemoveAll(System.String,System.String)">
            <summary>
            Remove all the occurrences of a given value.
            </summary>
        </member>
        <member name="M:CoreSharp.Extensions.StringExtensions.Left(System.String,System.Int32)">
            <summary>
            Take left N characters. Similar to Sql.Functions.Left.
            </summary>
        </member>
        <member name="M:CoreSharp.Extensions.StringExtensions.Right(System.String,System.Int32)">
            <summary>
            Take right N characters. Similar to Sql.Functions.Right.
            </summary>
        </member>
        <member name="M:CoreSharp.Extensions.StringExtensions.Mid(System.String,System.Int32)">
            <inheritdoc cref="M:CoreSharp.Extensions.StringExtensions.Mid(System.String,System.Int32,System.Int32)"/>
        </member>
        <member name="M:CoreSharp.Extensions.StringExtensions.Mid(System.String,System.Int32,System.Int32)">
            <summary>
            Take N characters from given index. Similar to Sql.Functions.Mid.
            </summary>
        </member>
        <member name="M:CoreSharp.Extensions.StringExtensions.FormatWith(System.String,System.Object[])">
            <inheritdoc cref="M:CoreSharp.Extensions.StringExtensions.FormatWith(System.String,System.IFormatProvider,System.Object[])"/>
        </member>
        <member name="M:CoreSharp.Extensions.StringExtensions.FormatWithCI(System.String,System.Object[])">
            <inheritdoc cref="M:CoreSharp.Extensions.StringExtensions.FormatWith(System.String,System.IFormatProvider,System.Object[])"/>
        </member>
        <member name="M:CoreSharp.Extensions.StringExtensions.FormatWith(System.String,System.IFormatProvider,System.Object[])">
            <summary>
            String.Format with custom IFormatProvider setting.
            </summary>
        </member>
        <member name="M:CoreSharp.Extensions.StringExtensions.EqualsAnyCI(System.String,System.Collections.Generic.IEnumerable{System.String})">
            <inheritdoc cref="M:CoreSharp.Extensions.StringExtensions.EqualsAnyCI(System.String,System.String[])"/>
        </member>
        <member name="M:CoreSharp.Extensions.StringExtensions.EqualsAnyCI(System.String,System.String[])">
            <summary>
            Check if given input equals to any of the given values (StringComparison.InvariantCultureIgnoreCase).
            </summary>
        </member>
        <member name="M:CoreSharp.Extensions.StringExtensions.StartsWithAnyCI(System.String,System.Collections.Generic.IEnumerable{System.String})">
            <inheritdoc cref="M:CoreSharp.Extensions.StringExtensions.StartsWithAnyCI(System.String,System.String[])"/>
        </member>
        <member name="M:CoreSharp.Extensions.StringExtensions.StartsWithAnyCI(System.String,System.String[])">
            <summary>
            Check if given input starts with any of the given values (StringComparison.InvariantCultureIgnoreCase).
            </summary>
        </member>
        <member name="M:CoreSharp.Extensions.StringExtensions.EndsWithAnyCI(System.String,System.Collections.Generic.IEnumerable{System.String})">
            <inheritdoc cref="M:CoreSharp.Extensions.StringExtensions.EndsWithAnyCI(System.String,System.String[])"/>
        </member>
        <member name="M:CoreSharp.Extensions.StringExtensions.EndsWithAnyCI(System.String,System.String[])">
            <summary>
            Check if given input ends with any of the given values (StringComparison.InvariantCultureIgnoreCase).
            </summary>
        </member>
        <member name="M:CoreSharp.Extensions.StringExtensions.ContainsAnyCI(System.String,System.Collections.Generic.IEnumerable{System.String})">
            <inheritdoc cref="M:CoreSharp.Extensions.StringExtensions.ContainsAnyCI(System.String,System.String[])"/>
        </member>
        <member name="M:CoreSharp.Extensions.StringExtensions.ContainsAnyCI(System.String,System.String[])">
            <summary>
            Check if given Input contains any of the given Values (StringComparison.InvariantCultureIgnoreCase).
            </summary>
        </member>
        <member name="M:CoreSharp.Extensions.StringExtensions.IsNullOrEmpty(System.String)">
            <summary>
            Check if input is null or empty.
            </summary>
        </member>
        <member name="M:CoreSharp.Extensions.StringExtensions.IsNullOrWhiteSpace(System.String)">
            <summary>
            Check if input is null or whitespace.
            </summary>
        </member>
        <member name="M:CoreSharp.Extensions.StringExtensions.Reverse(System.String)">
            <summary>
            Reverse a string.
            </summary>
        </member>
        <member name="M:CoreSharp.Extensions.StringExtensions.Erase(System.String,System.Char)">
            <inheritdoc cref="M:CoreSharp.Extensions.StringExtensions.Erase(System.String,System.String)"/>
        </member>
        <member name="M:CoreSharp.Extensions.StringExtensions.Erase(System.String,System.String)">
            <summary>
            Erase given value from string.
            </summary>
        </member>
        <member name="M:CoreSharp.Extensions.StringExtensions.SafeTrim(System.String,System.Char[])">
            <summary>
            Trim with null check.
            </summary>
        </member>
        <member name="M:CoreSharp.Extensions.StringExtensions.ToEntity``1(System.String)">
            <inheritdoc cref="M:CoreSharp.Extensions.StringExtensions.ToEntity(System.String,System.Type,Newtonsoft.Json.JsonSerializerSettings)"/>
        </member>
        <member name="M:CoreSharp.Extensions.StringExtensions.ToEntity(System.String,System.Type)">
            <inheritdoc cref="M:CoreSharp.Extensions.StringExtensions.ToEntity(System.String,System.Type,Newtonsoft.Json.JsonSerializerSettings)"/>
        </member>
        <member name="M:CoreSharp.Extensions.StringExtensions.ToEntity``1(System.String,Newtonsoft.Json.JsonSerializerSettings)">
            <inheritdoc cref="M:CoreSharp.Extensions.StringExtensions.ToEntity(System.String,System.Type,Newtonsoft.Json.JsonSerializerSettings)"/>
        </member>
        <member name="M:CoreSharp.Extensions.StringExtensions.ToEntity(System.String,System.Type,Newtonsoft.Json.JsonSerializerSettings)">
            <summary>
            Parse json to entity.
            </summary>
        </member>
        <member name="M:CoreSharp.Extensions.StringExtensions.ToExpandoObject(System.String)">
            <summary>
            Parse json to ToExpandoObject.
            </summary>
        </member>
        <member name="M:CoreSharp.Extensions.StringExtensions.GetLines(System.String,System.StringSplitOptions)">
            <summary>
            Split string to array of lines on new line indication.
            </summary>
        </member>
        <member name="M:CoreSharp.Extensions.StringExtensions.Replace``1(System.String,System.Collections.Generic.IDictionary{System.String,``0})">
            <summary>
            Replace dictionary entries in string.
            </summary>
        </member>
        <member name="M:CoreSharp.Extensions.StringExtensions.ToInt(System.String)">
            <inheritdoc cref="M:CoreSharp.Extensions.StringExtensions.ToInt(System.String,System.Globalization.NumberStyles,System.IFormatProvider)"/>
        </member>
        <member name="M:CoreSharp.Extensions.StringExtensions.ToInt(System.String,System.Globalization.NumberStyles)">
            <inheritdoc cref="M:CoreSharp.Extensions.StringExtensions.ToInt(System.String,System.Globalization.NumberStyles,System.IFormatProvider)"/>
        </member>
        <member name="M:CoreSharp.Extensions.StringExtensions.ToInt(System.String,System.IFormatProvider)">
            <inheritdoc cref="M:CoreSharp.Extensions.StringExtensions.ToInt(System.String,System.Globalization.NumberStyles,System.IFormatProvider)"/>
        </member>
        <member name="M:CoreSharp.Extensions.StringExtensions.ToIntCI(System.String)">
            <inheritdoc cref="M:CoreSharp.Extensions.StringExtensions.ToInt(System.String,System.Globalization.NumberStyles,System.IFormatProvider)"/>
        </member>
        <member name="M:CoreSharp.Extensions.StringExtensions.ToInt(System.String,System.Globalization.NumberStyles,System.IFormatProvider)">
            <summary>
            User-friendly <see cref="M:System.Int32.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,System.Int32@)"/> resulting to <see cref="T:System.Int32"/>.
            </summary>
        </member>
        <member name="M:CoreSharp.Extensions.StringExtensions.ToLong(System.String)">
            <inheritdoc cref="M:CoreSharp.Extensions.StringExtensions.ToLong(System.String,System.Globalization.NumberStyles,System.IFormatProvider)"/>
        </member>
        <member name="M:CoreSharp.Extensions.StringExtensions.ToLong(System.String,System.Globalization.NumberStyles)">
            <inheritdoc cref="M:CoreSharp.Extensions.StringExtensions.ToLong(System.String,System.Globalization.NumberStyles,System.IFormatProvider)"/>
        </member>
        <member name="M:CoreSharp.Extensions.StringExtensions.ToLong(System.String,System.IFormatProvider)">
            <inheritdoc cref="M:CoreSharp.Extensions.StringExtensions.ToLong(System.String,System.Globalization.NumberStyles,System.IFormatProvider)"/>
        </member>
        <member name="M:CoreSharp.Extensions.StringExtensions.ToLongCI(System.String)">
            <inheritdoc cref="M:CoreSharp.Extensions.StringExtensions.ToLong(System.String,System.Globalization.NumberStyles,System.IFormatProvider)"/>
        </member>
        <member name="M:CoreSharp.Extensions.StringExtensions.ToLong(System.String,System.Globalization.NumberStyles,System.IFormatProvider)">
            <inheritdoc cref="M:CoreSharp.Extensions.StringExtensions.ToLong(System.String,System.Globalization.NumberStyles,System.IFormatProvider)"/>
        </member>
        <member name="M:CoreSharp.Extensions.StringExtensions.ToShort(System.String)">
            <inheritdoc cref="M:CoreSharp.Extensions.StringExtensions.ToShort(System.String,System.Globalization.NumberStyles,System.IFormatProvider)"/>
        </member>
        <member name="M:CoreSharp.Extensions.StringExtensions.ToShort(System.String,System.Globalization.NumberStyles)">
            <inheritdoc cref="M:CoreSharp.Extensions.StringExtensions.ToShort(System.String,System.Globalization.NumberStyles,System.IFormatProvider)"/>
        </member>
        <member name="M:CoreSharp.Extensions.StringExtensions.ToShort(System.String,System.IFormatProvider)">
            <inheritdoc cref="M:CoreSharp.Extensions.StringExtensions.ToShort(System.String,System.Globalization.NumberStyles,System.IFormatProvider)"/>
        </member>
        <member name="M:CoreSharp.Extensions.StringExtensions.ToShortCI(System.String)">
            <inheritdoc cref="M:CoreSharp.Extensions.StringExtensions.ToShort(System.String,System.Globalization.NumberStyles,System.IFormatProvider)"/>
        </member>
        <member name="M:CoreSharp.Extensions.StringExtensions.ToShort(System.String,System.Globalization.NumberStyles,System.IFormatProvider)">
            <summary>
            User-friendly <see cref="M:System.Int16.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,System.Int16@)"/> resulting to <see cref="T:System.Int16"/>.
            </summary>
        </member>
        <member name="M:CoreSharp.Extensions.StringExtensions.ToFloat(System.String)">
            <inheritdoc cref="M:CoreSharp.Extensions.StringExtensions.ToFloat(System.String,System.Globalization.NumberStyles,System.IFormatProvider)"/>
        </member>
        <member name="M:CoreSharp.Extensions.StringExtensions.ToFloat(System.String,System.Globalization.NumberStyles)">
            <inheritdoc cref="M:CoreSharp.Extensions.StringExtensions.ToFloat(System.String,System.Globalization.NumberStyles,System.IFormatProvider)"/>
        </member>
        <member name="M:CoreSharp.Extensions.StringExtensions.ToFloat(System.String,System.IFormatProvider)">
            <inheritdoc cref="M:CoreSharp.Extensions.StringExtensions.ToFloat(System.String,System.Globalization.NumberStyles,System.IFormatProvider)"/>
        </member>
        <member name="M:CoreSharp.Extensions.StringExtensions.ToFloatCI(System.String)">
            <inheritdoc cref="M:CoreSharp.Extensions.StringExtensions.ToFloat(System.String,System.Globalization.NumberStyles,System.IFormatProvider)"/>
        </member>
        <member name="M:CoreSharp.Extensions.StringExtensions.ToFloat(System.String,System.Globalization.NumberStyles,System.IFormatProvider)">
            <summary>
            User-friendly <see cref="M:System.Single.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,System.Single@)"/> resulting to <see cref="T:System.Single"/>.
            </summary>
        </member>
        <member name="M:CoreSharp.Extensions.StringExtensions.ToDouble(System.String)">
            <inheritdoc cref="M:CoreSharp.Extensions.StringExtensions.ToDouble(System.String,System.Globalization.NumberStyles,System.IFormatProvider)"/>
        </member>
        <member name="M:CoreSharp.Extensions.StringExtensions.ToDouble(System.String,System.Globalization.NumberStyles)">
            <inheritdoc cref="M:CoreSharp.Extensions.StringExtensions.ToDouble(System.String,System.Globalization.NumberStyles,System.IFormatProvider)"/>
        </member>
        <member name="M:CoreSharp.Extensions.StringExtensions.ToDouble(System.String,System.IFormatProvider)">
            <inheritdoc cref="M:CoreSharp.Extensions.StringExtensions.ToDouble(System.String,System.Globalization.NumberStyles,System.IFormatProvider)"/>
        </member>
        <member name="M:CoreSharp.Extensions.StringExtensions.ToDoubleCI(System.String)">
            <inheritdoc cref="M:CoreSharp.Extensions.StringExtensions.ToDouble(System.String,System.Globalization.NumberStyles,System.IFormatProvider)"/>
        </member>
        <member name="M:CoreSharp.Extensions.StringExtensions.ToDouble(System.String,System.Globalization.NumberStyles,System.IFormatProvider)">
            <summary>
            User-friendly <see cref="M:System.Double.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,System.Double@)"/> resulting to <see cref="T:System.Double"/>.
            </summary>
        </member>
        <member name="M:CoreSharp.Extensions.StringExtensions.ToDecimal(System.String)">
            <inheritdoc cref="M:CoreSharp.Extensions.StringExtensions.ToDecimal(System.String,System.Globalization.NumberStyles,System.IFormatProvider)"/>
        </member>
        <member name="M:CoreSharp.Extensions.StringExtensions.ToDecimal(System.String,System.Globalization.NumberStyles)">
            <inheritdoc cref="M:CoreSharp.Extensions.StringExtensions.ToDecimal(System.String,System.Globalization.NumberStyles,System.IFormatProvider)"/>
        </member>
        <member name="M:CoreSharp.Extensions.StringExtensions.ToDecimal(System.String,System.IFormatProvider)">
            <inheritdoc cref="M:CoreSharp.Extensions.StringExtensions.ToDecimal(System.String,System.Globalization.NumberStyles,System.IFormatProvider)"/>
        </member>
        <member name="M:CoreSharp.Extensions.StringExtensions.ToDecimalCI(System.String)">
            <inheritdoc cref="M:CoreSharp.Extensions.StringExtensions.ToDecimal(System.String,System.Globalization.NumberStyles,System.IFormatProvider)"/>
        </member>
        <member name="M:CoreSharp.Extensions.StringExtensions.ToDecimal(System.String,System.Globalization.NumberStyles,System.IFormatProvider)">
            <summary>
            User-friendly <see cref="M:System.Decimal.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,System.Decimal@)"/> resulting to <see cref="T:System.Decimal"/>.
            </summary>
        </member>
        <member name="M:CoreSharp.Extensions.StringExtensions.ToBool(System.String)">
            <summary>
            Convert <see cref="T:System.String"/> to <see cref="T:System.Boolean"/>.
            Can convert "true/false", "1/0" and "yes/no" strings.
            </summary>
        </member>
        <member name="M:CoreSharp.Extensions.StringExtensions.ToDateTime(System.String,System.String)">
            <inheritdoc cref="M:CoreSharp.Extensions.StringExtensions.ToDateTime(System.String,System.String,System.Globalization.DateTimeStyles,System.IFormatProvider)"/>
        </member>
        <member name="M:CoreSharp.Extensions.StringExtensions.ToDateTime(System.String,System.String,System.Globalization.DateTimeStyles)">
            <inheritdoc cref="M:CoreSharp.Extensions.StringExtensions.ToDateTime(System.String,System.String,System.Globalization.DateTimeStyles,System.IFormatProvider)"/>
        </member>
        <member name="M:CoreSharp.Extensions.StringExtensions.ToDateTime(System.String,System.String,System.IFormatProvider)">
            <inheritdoc cref="M:CoreSharp.Extensions.StringExtensions.ToDateTime(System.String,System.String,System.Globalization.DateTimeStyles,System.IFormatProvider)"/>
        </member>
        <member name="M:CoreSharp.Extensions.StringExtensions.ToDateTimeSortable(System.String)">
            <inheritdoc cref="M:CoreSharp.Extensions.StringExtensions.ToDateTime(System.String,System.String,System.Globalization.DateTimeStyles,System.IFormatProvider)"/>
        </member>
        <member name="M:CoreSharp.Extensions.StringExtensions.ToDateTimeSortableUtc(System.String)">
            <inheritdoc cref="M:CoreSharp.Extensions.StringExtensions.ToDateTime(System.String,System.String,System.Globalization.DateTimeStyles,System.IFormatProvider)"/>
        </member>
        <member name="M:CoreSharp.Extensions.StringExtensions.ToDateTime(System.String,System.String,System.Globalization.DateTimeStyles,System.IFormatProvider)">
            <summary>
            User-friendly <see cref="M:System.DateTime.TryParseExact(System.String,System.String,System.IFormatProvider,System.Globalization.DateTimeStyles,System.DateTime@)"/> resulting to <see cref="T:System.DateTime"/>.
            </summary>
        </member>
        <member name="M:CoreSharp.Extensions.StringExtensions.ToGuid(System.String)">
            <inheritdoc cref="M:CoreSharp.Extensions.StringExtensions.ToGuid(System.String,System.String)"/>>
        </member>
        <member name="M:CoreSharp.Extensions.StringExtensions.ToGuid(System.String,System.String)">
            <summary>
            User-friendly <see cref="M:System.Guid.TryParseExact(System.String,System.String,System.Guid@)"/> resulting to <see cref="T:System.Guid"/>.
            </summary>
        </member>
        <member name="M:CoreSharp.Extensions.StringExtensions.Or(System.String,System.String)">
            <summary>
            Return the one that is not <see cref="M:System.String.IsNullOrEmpty(System.String)"/>.
            </summary>
        </member>
        <member name="T:CoreSharp.Extensions.TaskExtensions">
            <summary>
            <see cref="T:System.Threading.Tasks.Task"/> extensions.
            </summary>
        </member>
        <member name="M:CoreSharp.Extensions.TaskExtensions.AwaitResult``1(System.Threading.Tasks.Task{``0})">
            <summary>
            Chain calls <see cref="M:System.Threading.Tasks.Task`1.GetAwaiter"/> and <see cref="M:System.Runtime.CompilerServices.TaskAwaiter.GetResult"/>
            </summary>
        </member>
        <member name="M:CoreSharp.Extensions.TaskExtensions.WithAggregateException(System.Threading.Tasks.Task)">
            <summary>
            Aggregates all inner <see cref="T:System.Exception" />(s) into a single <see cref="T:System.AggregateException"/>.
            Best used in conjuction with <see cref="M:System.Threading.Tasks.Task.WaitAll(System.Threading.Tasks.Task[])"/>.
            </summary>
        </member>
        <member name="M:CoreSharp.Extensions.TaskExtensions.TimeoutAfter(System.Threading.Tasks.Task,System.TimeSpan)">
            <inheritdoc cref="M:CoreSharp.Extensions.TaskExtensions.TimeoutAfter``1(System.Threading.Tasks.Task{``0},System.TimeSpan)" />
        </member>
        <member name="M:CoreSharp.Extensions.TaskExtensions.TimeoutAfter``1(System.Threading.Tasks.Task{``0},System.TimeSpan)">
            <summary>
            Run a <see cref="T:System.Threading.Tasks.Task"/> within a given time frame.
            </summary>
            <exception cref="T:System.TimeoutException">When then given task is not completed within the specified time frame.</exception>
        </member>
        <member name="T:CoreSharp.Extensions.TcpClientExtensions">
            <summary>
            <see cref="T:System.Net.Sockets.TcpClient"/> extensions.
            </summary>
        </member>
        <member name="M:CoreSharp.Extensions.TcpClientExtensions.IsConnected(System.Net.Sockets.TcpClient,System.Int32)">
            <inheritdoc cref="M:CoreSharp.Extensions.TcpClientExtensions.IsConnectedAsync(System.Net.Sockets.TcpClient,System.Int32)"/>
        </member>
        <member name="M:CoreSharp.Extensions.TcpClientExtensions.IsConnectedAsync(System.Net.Sockets.TcpClient,System.Int32)">
            <inheritdoc cref="M:CoreSharp.Extensions.SocketExtensions.IsConnected(System.Net.Sockets.Socket,System.Int32)"/>
        </member>
        <member name="T:CoreSharp.Extensions.TimeSpanExtensions">
            <summary>
            <see cref="T:System.TimeSpan"/> extensions.
            </summary>
        </member>
        <member name="M:CoreSharp.Extensions.TimeSpanExtensions.ToStringReadable(System.Nullable{System.TimeSpan})">
            <inheritdoc cref="M:CoreSharp.Extensions.TimeSpanExtensions.ToStringReadable(System.TimeSpan)" />
        </member>
        <member name="M:CoreSharp.Extensions.TimeSpanExtensions.ToStringReadable(System.TimeSpan)">
            <summary>
            Convert TimeSpan to human readable string.
            </summary>
        </member>
        <member name="T:CoreSharp.Extensions.TypeExtensions">
            <summary>
            <see cref="T:System.Type"/> extensions.
            </summary>
        </member>
        <member name="M:CoreSharp.Extensions.TypeExtensions.IsNumeric(System.Type)">
            <summary>
            Check if given <see cref="T:System.Type"/> is numeric.
            </summary>
        </member>
        <member name="M:CoreSharp.Extensions.TypeExtensions.IsDate(System.Type)">
            <summary>
            Check if given <see cref="T:System.Type"/> is <see cref="T:System.DateTime"/> or <see cref="T:System.DateTimeOffset"/>.
            </summary>
        </member>
        <member name="M:CoreSharp.Extensions.TypeExtensions.IsPrimitiveExtended(System.Type)">
            <summary>
            Checks for
            <see cref="P:System.Type.IsPrimitive"/>,
            <see cref="T:System.String"/>,
            <see cref="T:System.Decimal"/>,
            <see cref="T:System.Guid"/>,
            <see cref="T:System.TimeSpan"/>,
            <see cref="T:System.DateTime"/>,
            <see cref="T:System.DateTimeOffset"/>.
            </summary>
        </member>
        <member name="M:CoreSharp.Extensions.TypeExtensions.GetNullableBaseType(System.Type)">
            <summary>
            If <see cref="T:System.Nullable`1"/> return <see cref="M:System.Nullable.GetUnderlyingType(System.Type)"/>, else the provided <see cref="T:System.Type"/> itself.
            </summary>
        </member>
        <member name="M:CoreSharp.Extensions.TypeExtensions.GetAttributes``1(System.Type)">
            <summary>
            Get list of specific <see cref="T:System.Attribute"/>.
            </summary>
        </member>
        <member name="M:CoreSharp.Extensions.TypeExtensions.GetAttribute``1(System.Type)">
            <summary>
            Get specific <see cref="T:System.Attribute"/>.
            </summary>
        </member>
        <member name="M:CoreSharp.Extensions.TypeExtensions.GetDirectInterfaces(System.Type)">
            <summary>
            Get top-level interfaces excluding nested ones.
            </summary>
        </member>
        <member name="M:CoreSharp.Extensions.TypeExtensions.GetDefault``1(System.Type)">
            <inheritdoc cref="M:CoreSharp.Extensions.TypeExtensions.GetDefault(System.Type)"/>
        </member>
        <member name="M:CoreSharp.Extensions.TypeExtensions.GetDefault(System.Type)">
            <summary>
            Runtime equivalent of default(T).
            </summary>
        </member>
        <member name="T:CoreSharp.Extensions.UlongExtensions">
            <summary>
            <see cref="T:System.UInt64"/> extensions.
            </summary>
        </member>
        <member name="M:CoreSharp.Extensions.UlongExtensions.ToComputerSize(System.UInt64)">
            <inheritdoc cref="M:CoreSharp.Extensions.UlongExtensions.ToComputerSize(System.UInt64,System.String,System.IFormatProvider)"/>
        </member>
        <member name="M:CoreSharp.Extensions.UlongExtensions.ToComputerSize(System.UInt64,System.String)">
            <inheritdoc cref="M:CoreSharp.Extensions.UlongExtensions.ToComputerSize(System.UInt64,System.String,System.IFormatProvider)"/>
        </member>
        <member name="M:CoreSharp.Extensions.UlongExtensions.ToComputerSize(System.UInt64,System.IFormatProvider)">
            <inheritdoc cref="M:CoreSharp.Extensions.UlongExtensions.ToComputerSize(System.UInt64,System.String,System.IFormatProvider)"/>
        </member>
        <member name="M:CoreSharp.Extensions.UlongExtensions.ToComputerSizeCI(System.UInt64)">
            <inheritdoc cref="M:CoreSharp.Extensions.UlongExtensions.ToComputerSize(System.UInt64,System.String,System.IFormatProvider)"/>
        </member>
        <member name="M:CoreSharp.Extensions.UlongExtensions.ToComputerSize(System.UInt64,System.String,System.IFormatProvider)">
            <summary>
            Downsizes bytes and adds appropriate prefix.
            </summary>
        </member>
        <member name="T:CoreSharp.Extensions.UriExtensions">
            <summary>
            <see cref="T:System.Uri"/> extensions.
            </summary>
        </member>
        <member name="M:CoreSharp.Extensions.UriExtensions.GetQueryParameters(System.Uri)">
            <summary>
            Get <see cref="P:System.Uri.Query"/> parameters.
            </summary>
        </member>
        <member name="M:CoreSharp.Extensions.UriExtensions.GetFragmentParameters(System.Uri)">
            <summary>
            Get <see cref="P:System.Uri.Fragment"/> parameters.
            </summary>
        </member>
        <member name="T:CoreSharp.Extensions.XDocumentExtensions">
            <summary>
            <see cref="T:System.Xml.Linq.XDocument"/> extensions.
            </summary>
        </member>
        <member name="M:CoreSharp.Extensions.XDocumentExtensions.Deserialize``1(System.Xml.Linq.XDocument)">
            <inheritdoc cref="M:System.Xml.Serialization.XmlSerializer.Deserialize(System.Xml.XmlReader)"/>
        </member>
        <member name="M:CoreSharp.Extensions.XDocumentExtensions.GetElements(System.Xml.Linq.XDocument,System.String[])">
            <summary>
            Get all XElements on given path.
            </summary>
        </member>
        <member name="M:CoreSharp.Extensions.XDocumentExtensions.WhereAttribute(System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement},System.String,System.String)">
            <inheritdoc cref="M:CoreSharp.Extensions.XDocumentExtensions.WhereAttribute(System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement},System.String,System.Predicate{System.String})"/>
        </member>
        <member name="M:CoreSharp.Extensions.XDocumentExtensions.WhereAttribute(System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement},System.String,System.Predicate{System.String})">
            <summary>
            Filter XElement collection on attribute value predicate.
            </summary>
        </member>
        <member name="M:CoreSharp.Extensions.XDocumentExtensions.WhereChild(System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement},System.String,System.String)">
            <inheritdoc cref="M:CoreSharp.Extensions.XDocumentExtensions.WhereChild(System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement},System.String,System.Predicate{System.String})"/>
        </member>
        <member name="M:CoreSharp.Extensions.XDocumentExtensions.WhereChild(System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement},System.String,System.Predicate{System.String})">
            <summary>
            Filter XElement collection on children predicate.
            </summary>
        </member>
        <member name="T:CoreSharp.Models.Comparers.FileCountComparer">
            <summary>
            Compare <see cref="T:System.IO.DirectoryInfo"/> using their file count.
            </summary>
        </member>
        <member name="T:CoreSharp.Models.DbQuery">
            <summary>
            An extension to <see cref="T:System.Data.Common.DbConnection"/> to run quick actions on it.
            </summary>
        </member>
        <member name="P:CoreSharp.Models.DbQuery.TimeoutSeconds">
            <summary>
            Gets or sets the wait time (in seconds) before terminating
            the attempt to execute a <see cref="P:System.Data.Common.DbCommand.CommandTimeout"/> and generating an error.
            </summary>
        </member>
        <member name="P:CoreSharp.Models.DbQuery.QueryType">
            <summary>
            Gets or sets a value indicating how the <see cref="P:System.Data.Common.DbCommand.CommandText"/> property is to be interpreted.
            </summary>
        </member>
        <member name="P:CoreSharp.Models.DbQuery.Parameters">
            <summary>
            Represents a collection of parameters associated with a <see cref="T:System.Data.Common.DbCommand"/>
            and their respective mappings to columns in a DataSet.
            </summary>
        </member>
        <member name="M:CoreSharp.Models.DbQuery.Dispose">
            <inheritdoc />
        </member>
        <member name="M:CoreSharp.Models.DbQuery.AddParameter(System.String,System.Object)">
            <inheritdoc cref="M:System.Data.Common.DbParameterCollection.Add(System.Object)"/>
        </member>
        <member name="M:CoreSharp.Models.DbQuery.ExecuteNonQuery(System.String)">
            <inheritdoc cref="M:System.Data.Common.DbCommand.ExecuteNonQuery"/>
        </member>
        <member name="M:CoreSharp.Models.DbQuery.ExecuteNonQueryAsync(System.String,System.Threading.CancellationToken)">
            <inheritdoc cref="M:System.Data.Common.DbCommand.ExecuteNonQueryAsync(System.Threading.CancellationToken)"/>
        </member>
        <member name="M:CoreSharp.Models.DbQuery.ExecuteScalar``1(System.String)">
            <inheritdoc cref="M:System.Data.Common.DbCommand.ExecuteScalar"/>
        </member>
        <member name="M:CoreSharp.Models.DbQuery.ExecuteScalarAsync``1(System.String,System.Threading.CancellationToken)">
            <inheritdoc cref="M:System.Data.Common.DbCommand.ExecuteScalarAsync(System.Threading.CancellationToken)"/>
        </member>
        <member name="M:CoreSharp.Models.DbQuery.Fill(System.String,System.Data.DataTable)">
            <inheritdoc cref="M:CoreSharp.Models.DbQuery.FillAsync(System.String,System.Data.DataTable,System.Threading.CancellationToken)"/>
        </member>
        <member name="M:CoreSharp.Models.DbQuery.FillAsync(System.String,System.Data.DataTable,System.Threading.CancellationToken)">
            <inheritdoc cref="M:System.Data.DataTable.Load(System.Data.IDataReader)"/>
        </member>
        <member name="M:CoreSharp.Models.DbQuery.Fill(System.String,System.Data.DataSet)">
            <inheritdoc cref="M:CoreSharp.Models.DbQuery.FillAsync(System.String,System.Data.DataSet,System.Collections.Generic.IEnumerable{System.Data.Common.DataTableMapping},System.Threading.CancellationToken)"/>
        </member>
        <member name="M:CoreSharp.Models.DbQuery.Fill(System.String,System.Data.DataSet,System.Collections.Generic.IEnumerable{System.Data.Common.DataTableMapping})">
            <inheritdoc cref="M:CoreSharp.Models.DbQuery.FillAsync(System.String,System.Data.DataSet,System.Collections.Generic.IEnumerable{System.Data.Common.DataTableMapping},System.Threading.CancellationToken)"/>
        </member>
        <member name="M:CoreSharp.Models.DbQuery.Fill(System.String,System.Data.DataSet,System.Data.Common.DataTableMapping[])">
            <inheritdoc cref="M:CoreSharp.Models.DbQuery.FillAsync(System.String,System.Data.DataSet,System.Collections.Generic.IEnumerable{System.Data.Common.DataTableMapping},System.Threading.CancellationToken)"/>
        </member>
        <member name="M:CoreSharp.Models.DbQuery.FillAsync(System.String,System.Data.DataSet)">
            <inheritdoc cref="M:CoreSharp.Models.DbQuery.FillAsync(System.String,System.Data.DataSet,System.Collections.Generic.IEnumerable{System.Data.Common.DataTableMapping},System.Threading.CancellationToken)"/>
        </member>
        <member name="M:CoreSharp.Models.DbQuery.FillAsync(System.String,System.Data.DataSet,System.Data.Common.DataTableMapping[])">
            <inheritdoc cref="M:CoreSharp.Models.DbQuery.FillAsync(System.String,System.Data.DataSet,System.Collections.Generic.IEnumerable{System.Data.Common.DataTableMapping},System.Threading.CancellationToken)"/>
        </member>
        <member name="M:CoreSharp.Models.DbQuery.FillAsync(System.String,System.Data.DataSet,System.Collections.Generic.IEnumerable{System.Data.Common.DataTableMapping},System.Threading.CancellationToken)">
            <inheritdoc cref="M:System.Data.Common.DbDataAdapter.Fill(System.Data.DataSet)"/>
        </member>
        <member name="T:CoreSharp.Models.Grouping`2">
            <inheritdoc cref="T:System.Linq.IGrouping`2" />
        </member>
        <member name="T:CoreSharp.Models.HttpResponseException">
            <summary>
            Simple <see cref="T:System.Net.Http.HttpResponseMessage"/> exception.
            </summary>
        </member>
        <member name="M:CoreSharp.Models.NumericParser`1.TryParseValue(System.String,`0@)">
            <summary>
            Parse and convert <see cref="T:System.String"/> input to <see cref="T:System.Decimal"/>.
            If fails to do so, value remains untouched.
            </summary>
        </member>
        <member name="M:CoreSharp.Models.NumericParser`1.ParseValue(System.String)">
            <summary>
            Parse value to <see cref="T:System.Decimal"/>.
            Handles any type and format.
            </summary>
        </member>
        <member name="M:CoreSharp.Models.NumericParser`1.FormatValue(`0)">
            <inheritdoc cref="M:CoreSharp.Models.NumericParser`1.FormatValue(System.Nullable{System.Decimal})"/>
        </member>
        <member name="M:CoreSharp.Models.NumericParser`1.FormatValue(System.Nullable{System.Decimal})">
            <summary>
            Format <see cref="T:System.String"/>.
            </summary>
        </member>
        <member name="T:CoreSharp.Models.SerialPortSettings">
            <summary>
            Short <see cref="T:System.IO.Ports.SerialPort"/> settings class.
            </summary>
        </member>
        <member name="P:CoreSharp.Models.StepValidation.ValidationSteps.SequentialValidation">
            <summary>
            Steps have to be sequantially valid.
            If Step-1 is not valid, then Step-2 cannot be valid as well.
            </summary>
        </member>
        <member name="M:CoreSharp.Models.UrlQueryBuilder.Add``1(System.Collections.Generic.IDictionary{System.String,``0})">
            <summary>
            Add <see cref="T:System.Collections.Generic.IDictionary`2"/>.
            </summary>
        </member>
        <member name="M:CoreSharp.Models.UrlQueryBuilder.Parse``1(``0)">
            <summary>
            Split item into properties and add one-by-one.
            </summary>
        </member>
        <member name="M:CoreSharp.Models.UrlQueryBuilder.Add(System.String,System.DateTime)">
            <summary>
            Add <see cref="T:System.DateTime"/> and format with "s" specifier.
            </summary>
        </member>
        <member name="M:CoreSharp.Models.UrlQueryBuilder.Add(System.String,System.DateTimeOffset)">
            <summary>
            Add <see cref="T:System.DateTimeOffset"/> and format with "s" specifier.
            </summary>
        </member>
        <member name="M:CoreSharp.Models.UrlQueryBuilder.Add(System.String,System.TimeSpan)">
            <summary>
            Add <see cref="T:System.TimeSpan"/> and format with "s" specifier.
            </summary>
        </member>
        <member name="M:CoreSharp.Models.UrlQueryBuilder.Add``1(System.String,System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Add <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </summary>
        </member>
        <member name="M:CoreSharp.Models.UrlQueryBuilder.Add(System.String,System.Collections.IEnumerable)">
            <summary>
            Add <see cref="T:System.Collections.IEnumerable"/>.
            </summary>
        </member>
        <member name="P:CoreSharp.Sources.AsciiControls.Dictionary">
            <summary>
            List with ASCII control characters and their abbreviations.
            </summary>
        </member>
        <member name="T:CoreSharp.Utilities.ConsoleX">
            <summary>
            <see cref="T:System.Console"/> utilities.
            </summary>
        </member>
        <member name="M:CoreSharp.Utilities.ConsoleX.ClearLine">
            <summary>
            Clear current line.
            </summary>
        </member>
        <member name="M:CoreSharp.Utilities.ConsoleX.ClearLine(System.Int32)">
            <summary>
            Clear line.
            </summary>
        </member>
        <member name="M:CoreSharp.Utilities.ConsoleX.ClearLines(System.Int32[])">
            <summary>
            Clear list of lines.
            </summary>
        </member>
        <member name="M:CoreSharp.Utilities.ConsoleX.WaitForEnter">
            <summary>
            Wait for enter.
            </summary>
        </member>
        <member name="M:CoreSharp.Utilities.ConsoleX.NewLine">
            <summary>
            New line.
            </summary>
        </member>
        <member name="M:CoreSharp.Utilities.ConsoleX.Write(System.Object)">
            <inheritdoc cref="M:CoreSharp.Utilities.ConsoleX.Write(System.String)"/>
        </member>
        <member name="M:CoreSharp.Utilities.ConsoleX.Write(System.IFormatProvider,System.String,System.Object[])">
            <inheritdoc cref="M:CoreSharp.Utilities.ConsoleX.Write(System.String)"/>
        </member>
        <member name="M:CoreSharp.Utilities.ConsoleX.Write(System.String,System.Object[])">
            <inheritdoc cref="M:CoreSharp.Utilities.ConsoleX.Write(System.String)"/>
        </member>
        <member name="M:CoreSharp.Utilities.ConsoleX.Write(System.String)">
            <summary>
            Write data.
            </summary>
        </member>
        <member name="M:CoreSharp.Utilities.ConsoleX.WriteLine(System.Object)">
            <inheritdoc cref="M:CoreSharp.Utilities.ConsoleX.WriteLine(System.String)"/>
        </member>
        <member name="M:CoreSharp.Utilities.ConsoleX.WriteLine(System.IFormatProvider,System.String,System.Object[])">
            <inheritdoc cref="M:CoreSharp.Utilities.ConsoleX.WriteLine(System.String)"/>
        </member>
        <member name="M:CoreSharp.Utilities.ConsoleX.WriteLine(System.String,System.Object[])">
            <inheritdoc cref="M:CoreSharp.Utilities.ConsoleX.WriteLine(System.String)"/>
        </member>
        <member name="M:CoreSharp.Utilities.ConsoleX.WriteLine(System.String)">
            <summary>
            Write line.
            </summary>
        </member>
        <member name="M:CoreSharp.Utilities.ConsoleX.WriteLine">
            <inheritdoc cref="M:CoreSharp.Utilities.ConsoleX.WriteLine(System.String)"/>
        </member>
        <member name="M:CoreSharp.Utilities.ConsoleX.Log(System.IFormatProvider,System.String,System.Object[])">
            <inheritdoc cref="M:CoreSharp.Utilities.ConsoleX.Log(System.String)"/>
        </member>
        <member name="M:CoreSharp.Utilities.ConsoleX.LogCI(System.String,System.Object[])">
            <inheritdoc cref="M:CoreSharp.Utilities.ConsoleX.Log(System.String)"/>
        </member>
        <member name="M:CoreSharp.Utilities.ConsoleX.Log(System.String)">
            <summary>
            Log message with timestamp.
            </summary>
        </member>
        <member name="T:CoreSharp.Utilities.DirectoryX">
            <summary>
            <see cref="T:System.IO.Directory"/> utilities.
            </summary>
        </member>
        <member name="M:CoreSharp.Utilities.DirectoryX.Open(System.String)">
            <summary>
            Open directory with explorer.exe.
            </summary>
        </member>
        <member name="T:CoreSharp.Utilities.EnumX">
            <summary>
            <see cref="T:System.Enum"/> utilities.
            </summary>
        </member>
        <member name="M:CoreSharp.Utilities.EnumX.GetValues``1">
            <summary>
            Get enum values.
            </summary>
        </member>
        <member name="M:CoreSharp.Utilities.EnumX.GetDictionary``1">
            <summary>
            Get enum dictionary (Text-Value).
            </summary>
        </member>
        <member name="T:CoreSharp.Utilities.ExpressionX">
            <summary>
            <see cref="T:System.Linq.Expressions.Expression"/> utilities.
            </summary>
        </member>
        <member name="M:CoreSharp.Utilities.ExpressionX.GetMemberInfo``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            Get <see cref="T:System.Reflection.MemberInfo"/> from given <see cref="T:System.Linq.Expressions.Expression`1"/> selector.
            </summary>
        </member>
        <member name="T:CoreSharp.Utilities.HashSetX">
            <summary>
            <see cref="T:System.Collections.Generic.HashSet`1"/> utilities.
            </summary>
        </member>
        <member name="M:CoreSharp.Utilities.HashSetX.New``2(System.Func{``0,``1})">
            <inheritdoc cref="M:System.Collections.Generic.HashSet`1.#ctor(System.Collections.Generic.IEqualityComparer{`0})" />
        </member>
        <member name="M:CoreSharp.Utilities.HashSetX.New``2(System.Int32,System.Func{``0,``1})">
            <inheritdoc cref="M:System.Collections.Generic.HashSet`1.#ctor(System.Int32,System.Collections.Generic.IEqualityComparer{`0})" />
        </member>
        <member name="M:CoreSharp.Utilities.HashSetX.New``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
            <inheritdoc cref="M:System.Collections.Generic.HashSet`1.#ctor(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEqualityComparer{`0})" />
        </member>
        <member name="T:CoreSharp.Utilities.HttpMethodX">
            <summary>
            <see cref="T:System.Net.Http.HttpMethod"/> related utilities.
            </summary>
        </member>
        <member name="M:CoreSharp.Utilities.HttpMethodX.GetRestMethod(System.Net.Http.HttpMethod)">
            <inheritdoc cref="M:CoreSharp.Utilities.HttpMethodX.GetRestMethod(System.String)"/>
        </member>
        <member name="M:CoreSharp.Utilities.HttpMethodX.GetRestMethod(System.String)">
            <summary>
            Get <see cref="T:CoreSharp.Enums.RestMethod" /> from <see cref="T:System.String" /> method.
            </summary>
        </member>
        <member name="M:CoreSharp.Utilities.HttpMethodX.GetHttpMethod(CoreSharp.Enums.RestMethod)">
            <inheritdoc cref="M:CoreSharp.Utilities.HttpMethodX.GetHttpMethod(System.String)"/>
        </member>
        <member name="M:CoreSharp.Utilities.HttpMethodX.GetHttpMethod(System.String)">
            <summary>
            Get <see cref="T:System.Net.Http.HttpMethod"/> from <see cref="T:System.String" /> name.
            </summary>
        </member>
        <member name="T:CoreSharp.Utilities.IPAddressX">
            <summary>
            <see cref="T:System.Net.IPAddress"/> utilities.
            </summary>
        </member>
        <member name="M:CoreSharp.Utilities.IPAddressX.GetCurrentIpCollection">
            <summary>
            Get current machines ip collection.
            </summary>
        </member>
        <member name="T:CoreSharp.Utilities.JsonX">
            <summary>
            Json utilities.
            </summary>
        </member>
        <member name="M:CoreSharp.Utilities.JsonX.IsEmpty(System.String)">
            <summary>
            Check if string is an empty json.
            </summary>
        </member>
        <member name="T:CoreSharp.Utilities.StringX">
            <summary>
            <see cref="T:System.String"/> utilities.
            </summary>
        </member>
        <member name="M:CoreSharp.Utilities.StringX.FirstNotEmpty(System.Collections.Generic.IEnumerable{System.String})">
            <inheritdoc cref="M:CoreSharp.Utilities.StringX.FirstNotEmpty(System.String[])"/>
        </member>
        <member name="M:CoreSharp.Utilities.StringX.FirstNotEmpty(System.String[])">
            <summary>
            Return first value not null or whitespace.
            </summary>
        </member>
        <member name="T:CoreSharp.Utilities.UriX">
            <summary>
            <see cref="T:System.Uri"/> utilities.
            </summary>
        </member>
        <member name="M:CoreSharp.Utilities.UriX.JoinSegments(System.Object[])">
            <summary>
            Combines url segments.
            <example>
            <code>
            // "/sec1/sec2/sec3/"
            var url = Url.JoinSegments("/sec1/", "/sec2/", "/sec3");
            </code>
            </example>
            </summary>
        </member>
        <member name="M:CoreSharp.Utilities.UriX.GetParameters(System.String)">
            <summary>
            Extract uri parameters.
            </summary>
        </member>
        <member name="M:CoreSharp.Utilities.UriX.Build``1(System.String,System.Collections.Generic.IDictionary{System.String,``0})">
            <summary>
            Build url from base url and parameters.
            </summary>
        </member>
        <member name="T:CoreSharp.Utilities.ValueTaskX">
            <summary>
            <see cref="T:System.Threading.Tasks.ValueTask"/> utilities.
            </summary>
        </member>
        <member name="M:CoreSharp.Utilities.ValueTaskX.WhenAll(System.Collections.Generic.IEnumerable{System.Threading.Tasks.ValueTask})">
            <inheritdoc cref="M:CoreSharp.Utilities.ValueTaskX.WhenAll(System.Threading.Tasks.ValueTask[])"/>
        </member>
        <member name="M:CoreSharp.Utilities.ValueTaskX.WhenAll(System.Threading.Tasks.ValueTask[])">
            <inheritdoc cref="M:System.Threading.Tasks.Task.WhenAll(System.Threading.Tasks.Task[])"/>
        </member>
    </members>
</doc>
